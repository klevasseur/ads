<?xml version="1.0" encoding="UTF-8"?>
<section xml:id="s-binary_Representation_of_Positive_Integers">
<title>Binary Representation of Positive Integers </title><idx>Binary Representation</idx>
<subsection xml:id="ss-grouping-by-twos">
<title>Grouping by Twos</title>
<p>Recall that the set of positive integers, <m>\mathbb{P}</m>, is <m>\{1, 2, 3, . . . \}</m>. Positive integers are naturally used to count things. There are many ways to count and many ways to record, or represent, the results of counting. For example, if we wanted to count five hundred twenty-three apples, we might group the apples by tens. There would be fifty-two groups of ten with three single apples left over. The fifty-two groups of ten could be put into five groups of ten tens (hundreds), with two tens left over. The five hundreds, two tens, and three units is recorded as 523. This system of counting is called the base ten positional system, or decimal system. It is quite natural for us to do grouping by tens, hundreds, thousands, <m>\dots</m> since it is the method that all of us use in everyday life. </p>
<p> The term positional refers to the fact that each digit in the decimal representation of a number has a significance based on its position. Of course this means that rearranging digits will change the number being described. You may have learned of numeration systems in which the position of symbols does not have any significance (e.g., the ancient Egyptian system). Most of these systems are merely curiosities to us now.</p>
<p>The binary number system differs from the decimal number system in that units are grouped by twos, fours, eights, etc. That is, the group sizes are powers of two instead of powers of ten. For example, twenty-three can be grouped into eleven groups of two with one left over. The eleven twos can be grouped into five groups of four with one group of two left over. Continuing along the same lines, we find that twenty-three can be described as one sixteen, zero eights, one four, one two, and one one, which is abbreviated <m>10111_{\textrm{two}}</m>, or simply <m>10111</m> if the
context is clear. </p>
</subsection>
<subsection xml:id="ss-conversion-algorithm">
<title>A Conversion Algorithm</title>
<p>The process that we used to determine the binary representation of <m>23</m> can be described in general terms to determine the binary representation of any positive integer <m>n</m>. A general description of a process such as this one is called an algorithm. Since this is the first algorithm in the book, we will first write it out using less formal language than usual, and then introduce some <q>algorithmic notation.</q>  If you are unfamiliar with algorithms, we refer you to <xref ref="app-alg1" text="type-global" /></p> 
<p><ol marker="(1)">
	<li><p> Start with an empty list of bits. </p></li>
	<li><p> Assign the variable <m>k</m> the value <m>n</m>. </p></li>
	<li><p> While <m>k</m>'s value is positive, continue performing the following three steps until <m>k</m> becomes zero and then stop. </p>
	<p><ol marker="(a)"> 
		<li><p>divide <m>k</m> by 2, obtaining a quotient <m>q</m> (often denoted <m>k \textrm{ div } 2</m>) and a remainder <m>r</m> (denoted <m>(k \bmod 2)</m>). </p></li>
		<li><p>attach <m>r</m> to the left-hand side of the list of bits. </p></li>
		<li><p> assign the variable <m>k</m> the value <m>q</m>.</p></li>   
	</ol></p></li>
</ol></p>
<example  xml:id="An_example_of_conversion_to_binary">
<title>An example of conversion to binary</title>
<p> To determine the binary representation of 41 we take the following steps:</p>
<p><ul> 
<li><p><m>41 = 2 \times  20+ 1 \quad List = 1 </m> </p></li>
<li><p><m>20 = 2 \times  10+0 \quad List = 01 </m></p></li>
<li><p> <m>10 = 2\times 5 + 0 \quad List = 001 </m></p></li>
<li><p><m>5 =\text2\times  2+ 1 \quad List =1001</m> </p></li>
<li><p><m>2 =2\times  1+ 0 \quad List = 01001 </m></p></li>
<li><p><m>1 =\text2 \times 0\text+1  \quad List = 101001</m> </p></li>
</ul></p>   
<p>Therefore, <m>41=101001_{\textrm{two}}</m></p>
</example>
<p>The notation that we will use to describe this algorithm and all others is called pseudocode, an informal variation of the instructions that are commonly used in many computer languages. Read the following description carefully, comparing it with the informal description above. Appendix B, which contains a general discussion of the components of the algorithms in this book, should clear up any lingering questions. Anything after // are comments.</p> 
<algorithm  xml:id="binary-conversion-algorithm">
<title>Binary Conversion Algorithm</title><idx>Binary Conversion Algorithm</idx><statement>
<p> An algorithm for determining the binary representation of a positive integer.</p>
<p>Input: a positive integer n.</p> 
<p>Output: the binary representation of n in the form of a list of bits, with units bit last, twos bit next to last, etc.</p> 
<p><ol marker="(1)">
<li><p>k := n <m>\qquad  </m>     //initialize k</p></li>
<li><p>L := { } <m>\qquad  </m>   //initialize L to an empty list</p></li>
<li><p> While k > 0 do </p>
   <p><ol marker="(a)">
   	<li><p> q := k div 2		<m>\qquad  </m>	//divide k by 2</p></li>
      <li><p> r := k mod 2 </p></li>
   	<li><p>L := prepend r to L <m>\qquad  </m> //add r to the front of L </p></li>
    	<li><p> k := q   			<m>\qquad  </m>	//reassign k</p></li>
</ol></p></li>
</ol></p>
</statement>
</algorithm>
<p>Here is a Sage version of the algorithm with two alterations. It outputs the binary representation as a string, and it handles all integers, not just positive ones.</p>
<sage>
<input>
def binary_rep(n):
    if n==0:
        return '0'
    else:
        k=abs(n)
        s=''
        while k>0:
            s=str(k%2)+s
            k=k//2
        if n &lt; 0:
            s='-'+s
        return s
 
binary_rep(41)
</input>
<output>
'101001'
</output>

</sage>
<p>Now that you've read this section, you should get this joke.</p>
            <figure xml:id="onetoten">
                <caption>With permission from Randall Munroe, http://xkcd.com.
                </caption>
                <image width="64%" source="images/1_to_10.png">
                    <description><p>Comic from http://xkcd.com. Two individuals, Megan and Cueball, are conversing.  Transcript follows.  Megan: On a scale of 1 to 10, how likely is it that this question is using Binary?  Cueball: ...4?  Megan: What's a 4?</p></description>
                </image>
            </figure>
</subsection>
<exercises xml:id="exercises-1-4">
<title>Exercises</title>
<exercise number="1"><statement> 
<p>Find the binary representation of each of the following positive integers by working through the algorithm by hand.  You can check your answer using the sage cell above. </p>
<p><ol marker="(a)" cols="2"><li><p> 31</p></li><li><p> 32</p></li><li><p>10</p></li><li><p>100 </p></li></ol></p>
</statement> 
<answer><p><ol marker="(a)" cols="2"><li><p> <m>11111</m></p></li>
<li><p> <m>100000</m></p></li>
<li><p> <m>1010</m></p></li>
<li><p> <m>1100100</m></p></li>
</ol></p>
</answer>
</exercise>
<exercise number="2"><statement> 
<p>Find the binary representation of each of the following positive integers by working through the algorithm by hand.  You can check your answer using the sage cell above. </p> 
<p><ol marker="(a)" cols="2"><li><p> 64</p></li><li><p> 67</p></li><li><p>28</p></li><li><p>256 </p></li></ol></p>
</statement>
<answer component="im">
<p><ol marker="(a)" cols="2"><li><p>1000000</p></li><li><p> 1000011</p></li><li><p>11100</p></li><li><p>100000000 </p></li></ol></p>
</answer>
 </exercise>
<exercise number="3"><statement> 
<p>What positive integers have the following binary representations?</p>
<p><ol marker="(a)" cols="2"><li><p> 10010</p></li><li><p> 10011</p></li><li><p>101010</p></li><li><p>10011110000 </p></li></ol></p>
</statement>
<answer><p><ol marker="(a)" cols="2"><li><p> <m>18</m></p></li>
<li><p> <m>19</m></p></li>
<li><p> <m>42</m></p></li>
<li><p> <m>1264</m></p></li>
</ol></p>
</answer>
 </exercise>
<exercise number="4"><statement> 
<p>What positive integers have the following binary representations?
<ol marker="(a)" cols="2"><li><p> 100001</p></li><li><p> 1001001</p></li><li><p>1000000000</p></li><li><p>1001110000 </p></li></ol></p>
</statement> 
<answer component="im">
<p><ol marker="(a)" cols="2"><li><p> 33</p></li><li><p> 73</p></li><li><p>512</p></li><li><p>624 </p></li></ol></p>
</answer>
</exercise>
<exercise number="5"><statement> 
<p>The number of bits in the binary representations of integers increases by one as the numbers double.  Using this fact, determine how many bits the binary representations of the following decimal numbers have without actually doing the full conversion. <ol marker="(a)" cols="4"><li><p>2017</p></li><li><p>4000 </p></li><li><p>4500</p></li><li><p><m>2^{50}</m></p></li></ol></p> 
</statement>
<answer><p>There is a bit for each power of 2 up to the largest one needed to represent an integer, and you start counting with the zeroth power. For example, 2017 is between <m>2^{10}=1024</m> and <m>2^{11}=2048</m>, and so the largest power needed is <m>2^{10}</m>. Therefore there are <m>11</m> bits in binary 2017.</p>
<p><ol marker="(a)" cols="2">
<li><p> <m>11</m></p></li>
<li><p> <m>12</m></p></li>
<li><p> <m>13</m></p></li>
<li><p> 51</p></li>
</ol></p>
</answer>
</exercise>
<exercise number="6"><statement> 
<p>Let <m>m</m> be a positive integer with <m> n</m>-bit binary representation: <m>a_{n-1}a_{n-2}\cdots  a_1a_0</m> with <m>a_{n-1}=1</m> What are the smallest
and largest values that <m>m</m> could have? </p>
</statement>
<answer component="im">
<p>The smallest positive value is <m>2^{n-1}</m> while the largest is <m>2^n-1</m>.</p>
</answer>
 </exercise>
<exercise number="7"><statement> 
<p>If a positive integer is a multiple of 100, we can identify this fact from its decimal representation, since it will end with two zeros. What can you say about a positive integer if its binary representation ends with two zeros? What if it ends in <m>k</m> zeros?</p>
</statement> 
<answer><p>A number must be a multiple of four if its binary representation ends in two zeros. If it ends in <m>k</m> zeros, it must be a multiple of <m>2^k</m>.</p>
</answer>
</exercise>
<exercise number="8"><statement> 
<p>Can a multiple of ten be easily identified from its binary representation? </p>
</statement> 
<answer component="im">
<p>No, there is no easy way to identify a multiple of 10.  The last (units) bit must be 0, but the rest of the bits for multiples of 10 have no single pattern that we can easily identify.  Here are the first four multiples of 10 in binary:  <m>1010</m>, <m>10100</m>, <m>11110</m> and <m>101000</m>. There are a few patterns though. Notice that 10, 20 and 40 are related, but 30 has a different pattern.  Since 60 is two times 30, we know that 60 will have a binary representation of 111100.  Given a random positive integer in binary form that ends with 0, it's likely that we couldn't say whether it is a multiple of 10 without converting to base 10.</p>
</answer>

</exercise>
</exercises>
</section> 