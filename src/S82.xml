<?xml version="1.0" encoding="UTF-8"?>
<section xml:id="s-Sequences">
<title>Sequences</title>
<idx>Sequences</idx>
<subsection><title>Sequences and Ways They Are Defined</title>

<definition xml:id="def-sequence"><title>Sequence</title><idx>Sequence</idx><statement><p>A sequence is a function from the natural numbers into some predetermined set. The image of any natural number <m>k</m> can be written  as <m>S(k)</m> or <m>S_k</m> and is called the <m>k^{th}</m>  <em>term</em>  of <m>S</m>. The variable
<m>k</m> is called the  <em>index</em>  or  <em>argument</em>  of the sequence.
</p></statement></definition>


<p>For example, a sequence of integers would be a function <m>S:\mathbb{N}\to \mathbb{Z}</m>.</p>

<example xml:id="ex-three-sequences"><title>Three sequences defined in different ways</title>
<p><ol marker="(a)">
<li><p> The sequence <m>A</m> defined by <m>A(k) = k^2 - k</m>,  <m>k \geq  0</m>, is a sequence of integers.</p></li>
<li><p> The sequence <m>B</m> defined recursively by <m>B(0) = 2</m> and <m>B(k) = B(k - 1) + 3</m> for <m>k \geq  1</m> is a sequence of integers. The terms of <m>B</m> can be computed either by applying the recursion formula or by iteration. For example,
<me>
\begin{split}
B(3)  &amp;= B(2) + 3\\
		&amp; =(B(1)+3)+3\\
		&amp; = ((B(0)+3)+3)+3\\
		&amp;=((2+3)+3)+3=11
\end{split}
</me>
or
<me>
\begin{array}{c}
B(1) = B(0) + 3 = 2 + 3 = 5\\
B(2) = B(1) + 3 = 5 + 3 = 8\\
B(3) = B(2) + 3 = 8 + 3 = 11
\end{array}
</me>
</p></li>
<li><p>Let <m>C_r</m> be the number of strings of 0's and 1's of length <m>r</m> having no consecutive zeros. These terms define a sequence <m>C</m> of integers.</p></li>
</ol></p>
</example> 


<p>Remarks:</p>
<p><ol marker="(1)">
<li><p>A sequence is often called a  <em>discrete function</em>.</p></li>
<li><p>Although it is important to keep in mind that a sequence is a function, another useful way of visualizing a sequence is as a list. For example,
the sequence <m>A</m> in the previous example could be written as <m>(0, 0, 2, 6, 12, 20, \dots )</m>. Finite sequences can appear much the same way when they are the input to or output from a computer. The index of a sequence can be thought of as a time variable. Imagine the terms of a sequence flashing on a screen every second. Then <m>s_k</m> would be what you see in the <m>k^{th}</m> second. It is convenient to use terminology like this in describing sequences.
For example, the terms that precede the <m>k^{th}</m> term of <m>A</m> would be <m>A (0), A(1), . . . , A(k -1)</m>.  They might be called the earlier terms.</p></li>
</ol></p>

</subsection>
<subsection><title>A Fundamental Problem</title>
<p>Given the definition of any sequence, a fundamental problem that we will concern ourselves with is to devise a method for determining any specific term in a minimum amount of time. Generally, time can be equated with the number of operations needed. In counting operations, the application of a recursive formula would be considered an operation.</p>

 <p><ol marker="(a)">
<li><p> The terms of <m>A</m> in <xref ref="ex-three-sequences" text="type-global"/> are very easy to compute because of the closed form expression. No matter what term you decide to
compute, only three operations need to be performed.</p></li>
<li><p> How to compute the terms of <m>B</m> is not so clear. Suppose that you wanted to know <m>B(100)</m>. One approach would be to apply the definition
recursively: <me>B(100) = B(99) + 3 = (B(98) + 3) + 3 =\cdots</me>
The recursion equation for <m>B</m> would be applied 100 times and 100 additions would then follow. To compute <m>B(k)</m> by this
method, <m>2k</m> operations are needed. An iterative computation of <m>B(k)</m> is an improvement: 

<m>B(1) =B(0) +3 = 2 + 3 = 5\\
\\
B(2) =B(1)+3= 5 + 3 = 8\\
\\
\text{etc}.</m>

Only <m>k</m> additions are needed. This still isn't a good situation. As <m>k</m> gets large, we take more and more time to compute <m>B(k)</m>.  The formula <m>B(k)=B(k-1)+3</m> is called a recurrence relation on <m>B</m>. The process of finding a closed form expression for
<m>B(k)</m>, one that requires no more than some fixed number of operations, is called solving the recurrence relation.
</p></li>
<li><p> The determination of <m>C_k</m> is a standard kind of problem in combinatorics. One solution is by way of a recurrence relation. In fact, many problems in combinatorics are most easily solved by first searching for a recurrence relation and then solving it. The following
observation will suggest the recurrence relation that we need to determine <m>C_k</m>. If <m>k \geq  2</m>, then every string of 0's and 1's with length
<m>k</m> and no two consecutive 0's is either <m>1s_{k-1}</m> or <m>01s_{k-2}</m>, where <m>s_{k-1}</m> and <m>s_{k-2}</m> are strings with no two consecutive
0's of length <m>k - 1</m> and <m>k - 2</m> respectively. From this observation we can see that <m>C_k= C_{k-2}+C_{k-1}</m> for <m>k\geq 2</m>. The terms <m>C_0=
1</m> and <m>C_1 = 2</m> are easy to determine by enumeration. Now, by iteration, any <m>C_k</m> can be easily determined. For example, <m>C_5 = 21</m> can be computed with five additions. A closed form expression for <m>C_k</m> would be an improvement. Note that the recurrence relation for <m>C_k</m> is identical to the one for <xref ref="ex-fibonacci-sequence" text="title"/>. Only the basis is different.</p></li>
</ol></p>
</subsection>

<exercises xml:id="exercises-8-2">
<title>Exercises</title>
<exercise number="1"><statement>
<p> Prove by induction that <m>B(k) = 3k + 2,</m> <m>k\geq 0</m>, is a closed form expression for the sequence <m>B</m> in <xref ref="ex-three-sequences" text="type-global"/></p>
</statement>
<answer> 
<p>Basis: <m>B(0)=3\cdot 0+2=2</m>, as defined.</p>
<p>Induction: Assume: <m>B(k)=3k+2</m> for some <m>k\geq 0</m>.

<me>
\begin{split}
B(k+1) &amp;=B(k)+3\\
		&amp;=(3k+2)+3\quad \textrm{ by the induction hypothesis} \\
		&amp;=(3k+3)+2\\
		&amp;=3(k+1)+2\quad \textrm{as desired}
\end{split}
</me>
</p>
</answer>
</exercise>

<exercise number="2"><statement>
<p>The sequence of first differences of any sequence <m>S</m> is the sequence <m>S(k+1)-S(k)</m>.  The sequence of second differences is the sequence of first differences of the first differences:
	<me>(S(k+2)-S(k+1))-(S(k+1)-S(k))=S(k+2)-2 S(k+1)+S(k).</me>
<ol marker="(a)">
<li><p>Consider sequence <m>Q</m> defined by <m>Q(k) = 2k + 9</m>, <m>k \geq  1</m>. Complete the table below and determine a recurrence relation
that describes <m>Q</m>. 



<m>\begin{array}{c|c|c}
 k &amp; Q(k)  &amp; Q(k+1)-Q(k) \\
 \hline
 0 &amp; \quad\quad  &amp;   \\
 1 &amp;   &amp;   \\
 2 &amp;   &amp;   \\
 3 &amp;   &amp;   \\
 4 &amp;   &amp;   \\
 5 &amp;   &amp;   \\
\end{array}</m>
</p></li>
<li><p> Let <m>A(k) = k^2 - k</m>, <m>k \geq  0</m>. Complete the table below and determine a recurrence relation for <m>A</m>. 



 <me>\begin{array}{c|c|c|c}
 k &amp; A(k) &amp; A(k+1)-A(k) &amp; A(k+2)-2A(k+1)+A(k) \\
 \hline
 0 &amp;   &amp;   &amp;   \\
 1 &amp;   &amp;   &amp;   \\
 2 &amp;   &amp;   &amp;   \\
 3 &amp; \quad\quad    &amp;   &amp;   \\
 4 &amp;   &amp;   &amp;   \\
 5 &amp;   &amp;   &amp;   \\
 \end{array}</me>
</p></li>
</ol></p>
</statement>
<answer component="im">
<p>
<ol marker="(a)">
<li><p>The table below indicates that the recurrence relation
that describes <m>Q</m> is <m>Q(k+1)-Q(k)=2</m>, or rearranging the terms and changing the index, we get <m>Q(k)=Q(k-1)+2</m>, with the basis <m>Q(0)=9</m>. 



<m>\begin{array}{c|c|c}
 k &amp; Q(k)  &amp; Q(k+1)-Q(k) \\
 \hline
 0 &amp; 9  &amp; 2  \\
 1 &amp; 11  &amp; 2  \\
 2 &amp; 13  &amp; 2 \\
 3 &amp; 15  &amp; 2  \\
 4 &amp; 17  &amp; 2  \\
 5 &amp; 19  &amp; 2  \\
\end{array}</m>
</p></li>
<li><p>The table below suggests the recurrence relation for <m>A</m> is
<md>
<mrow>A(k+2)-2A(k+1)+A(k)=2</mrow>
<mrow>\text{or}</mrow>
<mrow>A(k)=2A(k-1)-A(k-2)+2</mrow>
</md> 



 <me>\begin{array}{c|c|c|c}
 k &amp; A(k) &amp; A(k+1)-A(k) &amp; A(k+2)-2A(k+1)+A(k) \\
 \hline
 0 &amp; 0   &amp; 0  &amp; 2  \\
 1 &amp; 0  &amp;  2 &amp;  2 \\
 2 &amp; 2  &amp; 4  &amp;  2 \\
 3 &amp; 6  &amp; 6  &amp;  2 \\
 4 &amp; 12  &amp; 8  &amp; 2  \\
 5 &amp; 20  &amp; 10  &amp; 2  \\
 \end{array}</me>
</p></li>
</ol>
</p>
</answer>
</exercise>

<exercise number="3" xml:id="ex-lines-regions"><statement><p> Given <m>k</m> lines (<m>k\geq 0</m>) on a plane such that no two lines are parallel and no three lines meet at the same point, let <m>P(k)</m>
be the number of regions into which the lines divide the plane (including the infinite ones (see <xref ref="exercise-8-2-3" text="type-global"/>). Describe how the recurrence
relation <m>P(k) = P(k - 1) + k</m> can be derived. Given that <m>P(0) = 1</m>, determine <m>P(5)</m>.
</p>
<figure xml:id="exercise-8-2-3">
	<caption>A general configuration of three lines</caption>
   <image width="60%" source="images/exercise-8-2-3.png">
   <description><p>A general configuration of three lines</p></description>
    </image>
</figure>
</statement>
<answer><p>Imagine drawing line <m>k</m> in one of the infinite regions that it passes through. That infinite region is divided into two infinite regions by line <m>k</m>. As line <m>k</m> is drawn through every one of the <m>k-1</m> previous lines, you enter another region that line <m>k</m> divides. Therefore <m>k</m> regions are divided and the number of regions is increased by <m>k</m>.  From this observation we get <m>P(5)=16</m>. </p>
</answer>

</exercise>

<exercise number="4"><statement><p> A sample of a radioactive substance is expected to decay by 0.15 percent each hour. If <m>w_t,</m> <m>t \geq  0</m>, is the weight of the sample
<m>t</m> hours into an experiment, write a recurrence relation for <m>w</m>.</p>
</statement>
<answer component="im">
<p><m>w_t=w_{t-1}-0.0015 w_{t-1}=0.9985 w_{t-1}</m></p>
</answer>
</exercise>

<exercise number="5"><statement><p> Let <m>M(n)</m> be the number of multiplications needed to evaluate an <m>n^{th}</m> degree polynomial. Use the recursive definition of a
polynomial expression to define <m>M</m> recursively.</p>
</statement>
<answer> <p>For <m>n</m> greater than zero, <m>M(n)=M(n-1)+1</m>, and <m>M(0)=0</m>.</p>
</answer>
</exercise>

<exercise number="6"><statement><p> Let <m>S</m> be sequence of integers.   Using short English sentences, not symbols, describe what the following propositions say  about <m>S</m>.  Are the two propositions equivalent?
<ol marker="(a)">
<li><p> <m>(\forall M)_{\mathbb{N}}((\exists  n)_{\mathbb{N}}(S(n)\geq M))</m></p></li>
<li><p> <m>(\forall M)_{\mathbb{N}}((\exists  N)_{\mathbb{N}}((\forall  n)_{\mathbb{N}}(n \geq N \rightarrow S(n)\geq M)))</m></p></li>
</ol> </p>
</statement>
<answer component="im">
<p><ol marker="(a)">
<li><p> S is unbounded.  For any real number, no matter how large, there will be a term of the sequence that will exceed that number.</p></li>
<li><p>S is unbounded and stays at an arbitrarily high level.  For any real number, S will exceed that number at some point and stay above that level.</p></li>
</ol>
The second condition is stronger than the first.  An example of a sequence for which the first condition is true but the second is not true is the sequence <m>S(k)=(-1)^k k^2</m>.</p>
</answer>
</exercise>

</exercises>
</section>