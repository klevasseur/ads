<?xml version="1.0" encoding="UTF-8" ?>
<section xml:id="s-graphs-introduction">
<title>Graphs - General Introduction</title>
<subsection><title>Definitions</title>
<p>Recall that we introduced directed graphs in Chapter 6 as a tool to visualize relations on a set.  Here is a formal definition.</p>

<definition xml:id="def-simple-directed-graph"><title>Simple Directed Graph</title>
<idx><h>Graph</h><h>Simple Directed</h></idx><idx>Directed Graph</idx><idx><h>Edges</h><h>of a directed graph</h></idx>
<statement><p> A simple directed graph consists of a nonempty <term>set of vertices</term>, <m>V</m>, and a <term>set of edges</term>, <m>E</m>, that is a subset of the set <m>V \times V</m>.  </p></statement></definition>

<note><title>Some Terminology and Comments</title><p>Each edge is an ordered pair of elements from the vertex set.  
The first entry is the <term>initial vertex</term> of the edge and the second entry is the <term>terminal vertex</term>. Despite the set terminology in this definition, we often think of a graph as a picture, an aid in visualizing a situation. In Chapter 6, we introduced this concept to help understand relations on sets. Although those relations were principally of a mathematical nature, it remains true that when we see a graph, it tells us how the elements of a set are related to one another.  We have chosen not to allow a graph with an empty vertex set, the so-called empty graph.   There are both advantages and disadvantages to allowing the empty graph, so you may encounter it in other references.</p></note>
<example xml:id="ex-9-1"><title>A Simple Directed Graph</title><p><xref ref="fig-directed-graph-ex1" text="type-global"/> is an example of a simple directed graph. In set terms, this graph is <m>(V, E)</m>, where <m>V = \{s, a, b\}</m> and <m>E = \{(s, a), (s, b), (a, b), (b, a), (b,b)\}</m>. Note how each edge is labeled either 0 or 1. There are often reasons for labeling even simple graphs. Some labels are to help make a graph easier to discuss; others are more significant. We will discuss the significance of the
labels on this graph later.</p>
	<figure xml:id="fig-directed-graph-ex1">
		 <caption>A directed graph</caption>
		 <image width="75%" source="images/fig-directed-graph-ex1.png">
			  <description><p>A directed graph</p></description>
		 </image>
	</figure>
</example>

<p>There are cases where the order of the vertices is not significant and so we use a different mathematical model for this situation:</p>

<definition xml:id="def-undirected-graph"><title>Simple Undirected Graph</title>
<idx>Simple Undirected Graph</idx>
<idx><h>Graph</h><h>Simple Undirected</h></idx><idx><h>Edges</h><h>of an undirected graph</h></idx>
<statement><p>A simple undirected graph consists of a nonempty set <m>V</m>, called a vertex set, and a set <m>E</m> of two-element subsets of <m>V</m>, called the edge set. </p></statement></definition>
<p>Henceforth, we will refer to simple undirected graphs as <em>undirected graphs</em>.  When drawing an undirected graph, the two-element subsets are drawn as undirected lines or arcs connecting the vertices.  It is customary to not allow <q>self loops</q> in undirected graphs since <m>\{v,v\}</m> isn't a two element subset of vertices.</p>
<note><title>On Empty Graphs</title><idx>Empty Graph</idx>
<p>It may occur to some readers that a graph could be empty, in the sense that it has empty vertex and edge sets.  We might refer to this graph as the <term>empty graph</term>.  However, there doesn't seem to be a universally agreed upon definition of an empty graph. In some works, a graph with any number of vertices and no edges is called an empty graph.  To avoid this dilemma, we have defined both directed and undirected graphs to have nonempty vertex sets.  For convenience, we've relaxed this rule in our definition of a <xref ref="def-binary-tree" text="title"/> and allowed for an empty binary tree.</p>
</note>

<example xml:id="ex-undirected-1"><title>An Undirected Graph</title><p>A network of computers can be described easily using a graph.  <xref ref="fig-undirected-1" text="type-global"/> describes a network of five computers, <m>a</m>, <m>b</m>, <m>c</m>, <m>d</m>, and <m>e</m>. An edge between any two vertices indicates that direct two-way communication is possible between the two computers. Note that the edges of this graph are not directed. This is due to the fact that the relation that is being displayed is symmetric (i.e., if <m>X</m> can communicate with <m>Y</m>, then <m>Y</m> can communicate with <m>X</m>). Although directed
edges could be used here, it would simply clutter the graph.</p>
                <sidebyside valign="middle">
                   <figure  xml:id="fig-undirected-1">
                        <caption>Communications Map</caption>
                        <image source="images/fig-undirected-1.png">
                            <description><p>Trefoil image</p></description>
                        </image>
                    </figure>
                    <figure  xml:id="fig-undirected-2">
                        <caption>Island Road Map</caption>
                        <image source="images/fig-undirected-2.png"/>
                    </figure>
                </sidebyside>

<p>This undirected graph, in set terms,  is <m>V = \{a, b, c, d, e\}</m> and <m>E = \{\{a, b\}, \{a, d\}, \{b, c\}, \{b, d\}, \{c, e\}, \{b, e\}\}</m></p> 
<p>There are several other situations for which this graph can serve as a model. One of them is to interpret the vertices as cities and the edges as roads, an abstraction of a map such as the one in <xref ref="fig-undirected-2" text="type-global"/>. Another interpretation is as an abstraction of the floor plan of a house.  See <xref ref="exercise-house-9-1" text="type-global"/>. Vertex <m>a</m> represents the outside of the house; all others represent rooms. Two vertices are connected if there is a door between
them. </p>
</example>


<definition xml:id="def-complete-undirected-graph"><title>Complete Undirected Graph</title><idx>Complete Undirected Graph.</idx><notation><usage><m>K_n</m></usage><description>A complete undirected graph with <m>n</m> vertices.</description></notation>
<statement><p>A complete undirected graph on <m>n</m> vertices is an undirected graph with the property that each pair of distinct vertices are connected to one another. Such a graph is usually denoted by <m>K_n</m>.</p></statement></definition>


<p>In certain cases there may be a need for more than one edge between two vertices, and we need to expand the class of directed graphs.</p>
<definition xml:id="def-multigraph"><title>Multigraph</title>
<idx>Multigraph</idx>
<idx><h>Graph</h><h>Multigraph</h></idx>
<statement><p>
A multigraph is a set of vertices <m>V</m> with a set of edges that can contain more than one edge between the vertices.</p></statement></definition>
<p>One important point to keep in mind is that if we identify a graph as being a multigraph, it isn't necessary that there are two or more edges between some of the vertices.  It is only just <em>allowed</em>. In other words, every simple graph is a multigraph. This is analogous to how a rectangle is a more general geometric figure than a square, but a square is still considered a rectangle.</p>
<example xml:id="ex-multigraph-9-1"><title>A Multigraph</title><p>A common occurrence of a multigraph is a road map. The cities and towns on the map can be thought of as vertices, while the roads are the edges. It is not uncommon to have more than one road connecting two cities. In order to give clear travel directions, we name or number roads so that there is no ambiguity. We use the same method to describe the edges of the multigraph in <xref ref="fig-multigraph-ex1" text="type-global"/>. There is no question
what <m>e3</m> is; however, referring to the edge <m>(2, 3)</m> would be ambiguous.
</p>
	<figure xml:id="fig-multigraph-ex1">
		 <caption>A directed multigraph</caption>
		 <image width="100%" source="images/fig-multigraph-ex1.png">
			  <description><p>A directed multigraph</p></description>
		 </image>
	</figure>

</example>

 <example xml:id="ex-labeled-graph-9-1"><title>A Labeled Graph</title><p> A flowchart is a common example of a simple graph that requires labels for its vertices and some of its edges. <xref ref="fig-labeled-graph-9-1" text="type-global"/>
is one such example that illustrates how many problems are solved. 
</p>
		<figure xml:id="fig-labeled-graph-9-1">
			 <caption>A flow chart - an example of a labeled graph</caption>
			 <image width="90%" source="images/fig-labeled-graph-9-1.png">
				  <description><p>A flow chart - an example of a labeled graph</p></description>
			 </image>
		</figure>
<p>At the start of the problem-solving process, we are at the vertex labeled <q>Start</q> and at the end (if we are lucky enough to have solved the
problem) we will be at the vertex labeled <q>End.</q> The sequence of vertices that we pass through as we move from <q>Start</q> to <q>End</q>
is called a path. The <q>Start</q> vertex is called the initial vertex of the path, while the <q>End</q> is called the final, or terminal, vertex.
Suppose that the problem is solved after two attempts; then the path that was taken is <m>\text{Start}, R, A, Q, L, A, Q, \text{End}</m>. An alternate
path description would be to list the edges that were used: <m>1, 2, 3, \text{No}, 4, 3, \text{Yes}</m>. This second method of describing a path has
the advantage of being applicable for multigraphs. On the graph in <xref ref="fig-multigraph-ex1" text="type-global" />, the vertex list <m>1,2,3,4,3</m> does not clearly describe a path between
1 and 3, but <m>e_1,e_4, e_6, e_7</m> is unambiguous.</p>
</example>






<note><title>A Summary of Path Notation and Terminology</title>
<idx>Path, in a graph</idx>
<idx>Circuit, in a graph</idx>
<p>If <m>x</m> and <m>y</m> are two vertices of a graph, then a <term>path</term> between <m>x</m> and <m>y</m> describes a motion from <m>x</m> to
<m>y</m> along edges of the graph. Vertex <m>x</m> is called the initial vertex of the path and <m>y</m> is called the terminal vertex.
A path between <m>x</m> and <m>y</m> can always be described by its  edge list, the list of edges that were used: <m>\left(e_1, e_2,
\ldots , e_n\right)</m>, where: (1) the initial vertex of <m>e_1</m> is <m>x</m>; (2) the terminal vertex of <m>e_i</m> is the initial vertex of <m>e_{i+1}</m>, <m>i = 1, 2, \ldots , n - 1</m>; and (3) the terminal vertex of <m>e_n</m> is <m>y</m>. The number of edges in the edge list is the <term>path length</term>. A path on a simple graph can also be described by a vertex list. A path of length <m>n</m> will have a list of <m>n + 1</m> vertices
<m>v_0=x</m>, <m>v_1</m>, <m>v_2,\ldots ,v_n=y</m>, where, for <m>k = 0,1,2,\ldots , n-1</m>, <m>\left(v_k,v_{k+1}\right)</m> is an edge on the graph. A <term>
circuit</term> is a path that terminates at its initial vertex.</p>
<p>Suppose that a path between two vertices has an edge list <m>(e_1, e_2 , . . . ,e_n)</m>. A <term>subpath</term> of this graph is any portion of the path described by one or more consecutive edges in the edge list. For example, <m>(3, \textrm{No}, 4)</m> is a subpath of <m>(1,2,3, \textrm{No}, 4, 3, \text{Yes})</m>.  Any path is its own subpath; however, we call it an improper subpath of itself. All other nonempty subpaths are called proper subpaths.</p>
<p>A path or circuit is  simple if it contains no proper subpath that is a circuit. This is the same as saying that a path or circuit is simple
if it does not visit any vertex more than once except for the common initial and terminal vertex in the circuit. In the problem-solving method described in <xref ref="fig-labeled-graph-9-1" text="type-global"/>, the path that you take is simple only if you reach a solution on the first try.</p>
</note>

</subsection>
<subsection><title>Subgraphs</title>

<p>Intuitively, you could probably predict what the term <q>subgraph</q> means.  A graph contained within a graph, right?  But since a graph involves two sets, vertices and edges, does it involve a subset of both of these sets, or just one of them?   The answer is it could be either.  There are different types of subgraphs. The two that we will define below will meet most of our future needs in discussing the theory of graphs.</p>
<definition xml:id="def-subgraph"><title>Subgraph</title>
<idx>Subgraph</idx>
<idx>Induced Subgraph</idx>
<idx>Spanning Subgraph</idx>
<statement><p>Let <m>G=(V,E)</m> be a graph of any kind: directed, directed multigraph, or undirected. <m>G'=(V',E')</m> is a subgraph  of <m>G</m> if <m>V' \neq \emptyset</m>,  <m>V' \subseteq V</m> and <m>e \in E'</m> only if <m>e \in E</m> and the vertices of <m>e</m> are in <m>V'</m>.  You create a subgraph of <m>G</m> by removing zero or more vertices and all edges that include the removed vertices and then you possibly remove some other edges.</p><p>If the only removed edges are those that include the removed  vertices, then we say that <m>G'</m> is an <term>induced subgraph</term>.  Finally, <m>G'</m> is a  <term>spanning subgraph</term> of <m>G</m> if <m>V' = V</m>, or, in other words, no vertices are removed from <m>G</m>, only edges. </p></statement></definition>

<example xml:id="ex-subgraphs"><title>Some subgraphs</title>
<p>Consider the graph, <m>G</m>, in the top left of <xref ref="fig-subgraphs" text="type-global" />.  The other three graphs in that figure are all subgraphs of <m>G</m>.  The graph in the top right was created by first removing vertex 5 and all edges connecting it.  In addition, we have removed the edge <m>\{1,4\}</m>.   That removed edge disqualifies the graph from being an induced subgraph.  The graphs in the bottom left and right are both spanning subgraphs.  The one on the bottom right is a tree, and is referred to as a spanning subtree.  Spanning subtrees will be discussed in the chapter on <xref ref="chapter_10" text="title"/>.
</p>

<figure xml:id="fig-subgraphs">
 <caption>A few subgraphs
 </caption>
 <image width="90%" source="images/fig-subgraphs.png">
	  <description><p>A few subgraphs</p></description>
<!-- 
<sageplot>
g=Graph({1:[3,4,5],2:[4,5],3:[4,5],6:[2,4]})
p1=g.plot(save_pos=True)
posit=g.get_pos()
p1a=g.plot(pos=posit)
posit_r=posit
posit_r.pop(5)
print(posit_r)
h1=Graph({1:[3],2:[4],3:[4],6:[2,4]})
p2=h1.plot(pos=posit_r)
h2=Graph({1:[3,5],2:[4,5],3:[4],6:[2]})
p3=h2.plot(pos=posit)
h3=g.spanning_trees()[9]
p4=h3.plot(pos=posit)
fig=graphics_array(((p1a,p2),(p3,p4)))
fig
</sageplot>
 -->
</image>
</figure>
</example>
<p>One set of subgraphs of any graph is the connected components of a graph.  For simplicity, we will define them for undirected graphs.   Given a graph  <m>G=(V,E)</m>, consider the relation <q>is connected to</q> on <m>V</m>.  We interpret this relation so that each vertex is connected to itself, and any two distinct vertices are related if there is a path along edges of the graph from one to the other.  It shouldn't be too difficult to convince yourself that this is an equivalence relation on <m>V</m>. </p> 
<definition xml:id="def-connected-component"><title>Connected Component</title>
<idx>Connected Component</idx>
<statement><p>Given a graph  <m>G=(V,E)</m>, let <m>C</m> be the relation <q>is connected to</q> on <m>V</m>.  Then the connected components of <m>G</m> are the induced subgraphs of <m>G</m> each with a vertex set that is an equivalence class with respect to <m>C</m>.</p></statement></definition>
<example xml:id="ex-connected-components"><p>If you ignore the duplicate names of vertices in the four graphs of <xref ref="fig-subgraphs" text="type-global" />, and consider the whole figure as one large graph, then there are four connected components in that graph. It's as simple as that! It's harder to describe precisely than to understand the concept.</p>
</example>
<p>From the examples we've seen so far, we can see that although a graph can be defined, in short, as a collection of vertices and edges, an integral part of most graphs is the labeling of the vertices and edges that allows us to interpret the graph as a model for some situation. We continue with a few more examples to illustrate this point.</p>
<example xml:id="ex-string-model-9-1"><title>A Graph as a Model for a Set of Strings</title><p>Suppose that you would like to mechanically describe the set of strings of 0's and
1's having no consecutive 1's. One way to visualize a string of this kind is with the graph in <xref ref="fig-directed-graph-ex1" text="type-global"/>. Consider any path starting at vertex <m>s</m>. If the label on each graph is considered to be the output to a printer, then the output will have no consecutive 1's. For example, the path that is described by the vertex list <m>(s,a, b, b, a, b, b, a, b)</m> would result in an output of <m>10010010</m>. Conversely, any string with  no consecutive 1's determines a path starting at s.
</p></example>

<example xml:id="ex-tournament-graph-9-1"><title>A Tournament Graph</title><p>Suppose that four teams compete in a round-robin sporting event; that is, each team meets every other team
once, and each game is played until a winner is determined. If the teams are named A, B, C, and D, we can define the relation <m>\beta</m> on the set
of teams by <m>X \beta  Y</m> if <m>X</m> beat <m>Y</m>. For one set of results, the graph of <m>\beta</m> might look like <xref ref="fig-tournament-graph-9-1" text="type-global"/>.</p>

<figure xml:id="fig-tournament-graph-9-1">
                <caption>Round-robin tournament graph with four vertices
                </caption>
                <image width="60%" source="images/fig-tournament-graph-9-1.png">
                    <description><p>Round-robin tournament graph with four vertices</p></description>
                </image>
</figure>
</example>
<p>There are many types of tournaments and they all can be modeled by different types of graphs.</p>


<definition xml:id="def-tournament-graph"><title>Tournament Graph</title><idx>Tournament Graph</idx>
<statement><p><ol marker="(a)">
<li><p> A tournament graph is a directed graph with the property that no edge connects a vertex to itself, and between any two vertices there is at most one edge.</p></li>
<li><p>A complete (or round-robin) tournament graph is a tournament graph with the property that between any two distinct vertices there is exactly
one edge.</p></li>
<li><p>A single-elimination tournament graph is a tournament graph with the properties that: (i) one vertex (the champion) has no edge terminating
at it and at least one edge initiating from it; (ii) every other vertex is the terminal vertex of exactly one edge; and (iii) there is a path from
the champion vertex to every other vertex.</p></li>
</ol></p>
</statement></definition>

<example xml:id="ex-single-elimination-9-1"><title>Graph of a Single Elimination Tournament</title><p> The major league baseball championship is decided with a single-elimination tournament, where each <q>game</q> is actually
a series of games. From 1969 to 1994, the two divisional champions in the American League (East and West) competed in a series of games. The loser is eliminated and the winner competed against the winner of the National League series (which is decided as in the American League). The tournament graph of the
1983 championship is in <xref ref="fig-mlb-1983-9-1"/></p>

 <figure xml:id="fig-mlb-1983-9-1">
		 <caption>A single elimination tournament graph
		 </caption>
		 <image width="60%" source="images/fig-mlb-1983-9-1.png">
			  <description><p>A single elimination tournament graph</p></description>
		 </image>
</figure>

</example>



</subsection>
<subsection><title>Graph Isomorphisms</title>


<p>Next, we establish the relation <q>is isomorphic to,</q> a form of equality on graphs. The graphs in <xref ref="fig-isomorphic-graphs-9-1" text="type-global"/> obviously share some similarities, such as the number of vertices and the number of edges. It happens that they are even more similar than just that. If the letters <m>a</m>, <m>b</m>, <m>c</m>, and <m>d</m> in the left graph are replaced with the numbers 1,3,4, and 2, respectively, and the vertices are moved around so that they have the same position as the graph on the right, you get the graph on the right.</p>

   <figure xml:id="fig-isomorphic-graphs-9-1">
                <caption>Isomorphic Graphs
                </caption>
                <image width="100%" source="images/fig-isomorphic-graphs-9-1.png">
                    <description><p>Isomorphic Graphs</p></description>
                </image>
   </figure>


<p>Here is a more precise definition that reflects the fact that the actual positioning (or embedding) of vertices isn't an essential part of a graph.</p>

<definition xml:id="def-isomorphic-graphs"><title>Isomorphic Graphs</title><idx>Isomorphic Graphs</idx><statement><p>Two graphs <m>(V, E)</m> and <m>(V', E')</m> are isomorphic if there exists a bijection <m>f:V\to V'</m> such that <m>\left(v_i,v_j\right)\in
E</m> if and only if <m>\left(f\left(v_i\right),f\left(v_j\right)\right)\in E'</m>. For multigraphs, we add that the number of edges connecting <m>v_i</m>
to <m>v_j</m> must equal the number of edges from <m>f\left(v_i\right)</m> to <m>f\left(v_j\right)</m>.</p></statement></definition>


<p>The most significant local characteristic of a vertex within a graph is its degree.
 Collectively, the degrees can partially characterize a graph.</p>
<definition xml:id="def-degree-of-a-vertex"><title>Degree of a vertex</title><idx>Degree</idx><notation><usage><m>deg(v), indeg(v), outdeg(v)</m></usage><description>degree, indegree and outdegree of vertex <m>v</m></description></notation>
<statement><p><ol marker="(a)">
<li><p> Let <m>v</m> be a vertex of an undirected graph. The degree of <m>v</m>, denoted <m>deg(v)</m>, is the number of edges that connect <m>v</m> to the other vertices in the graph.</p></li>
<li><p> If <m>v</m> is a vertex of a directed graph, then the outdegree of <m>v</m>, denoted <m>outdeg(v)</m>, is the number of edges of the graph that initiate
at <m>v</m>. The indegree of <m>v</m>, denoted <m>indeg(v)</m>, is the number of edges that terminate at <m>v</m>.</p></li>
</ol></p>
</statement></definition>
<definition xml:id="def-degree-sequence"><title>Degree Sequence of a Graph</title><idx>Degree Sequence of a Graph</idx>
<statement><p>The degree sequence of a simple undirected graph is the non-increasing sequence of its vertex degrees.</p></statement></definition>
<example xml:id="ex-degrees-9-1"><title>Some degrees</title>
 <figure xml:id="fig-degrees-example-9-1">
 					<caption>An undirected graph</caption>
                <image width="60%" source="images/fig-degrees-example-9-1.png">
                </image>
</figure>
<p><ol marker="(a)">
<li><p> The degrees of vertices 1 through 5 in <xref ref="fig-degrees-example-9-1" text="type-global"/> are 2, 3, 4, 1, and 2, respectively.  The degree sequence of the graph is <m>(4,3,2,2,1)</m>.</p></li>
<li><p> In a tournament graph, <m>outdeg(v)</m> is the number of wins for <m>v</m> and <m>indeg(v)</m> is the number of losses. In a complete (round-robin) tournament graph with <m>n</m> vertices, <m>outdeg(v)+ indeg(v) = n - 1</m> for each vertex.</p></li>
</ol></p>
</example>
<definition xml:id="def-graphic-sequence"><title>Graphic Sequence</title><idx>Graphic Sequence</idx>
<statement><p>A finite nonincreasing sequence of integers <m>d_1,d_2, \ldots , d_n</m> is graphic if there exists a simple undirected graph with  <m>n</m> vertices having the sequence as its degree sequence.</p></statement></definition>
<p> For example, <m>4,2,1,1,1,1</m> is graphic because the degrees of the graph in <xref ref="fig-degree-sequence-example" text="type-global"/>  match these numbers. There is no connection between the vertex number and its degree in this graph.</p>
<figure xml:id="fig-degree-sequence-example">
                <caption>A graph that shows that  <m>4,2,1,1,1,1</m>  is a graphic sequence.
                </caption>
                <image width="60%" source="images/fig-degree-sequence-example.png">
                    <description><p>A graph that shows that  <m>4,2,1,1,1,1</m>  is a graphic sequence.</p></description>
                </image>
</figure>
<p>See <xref ref="biblio-knuth-2011"/> for more details on what are also referred to as <term>graphical degree sequences</term>, including an algorithm for determining whether or not a sequence is graphic.</p>
</subsection>
<subsection><title>Next Steps</title>

<list xml:id="list-graph-prospectus"><title>A Prospectus for the Rest of the Chapter</title><introduction><p>The question <q>Once you have a graph, what do you do with it?</q> might come to mind. The following list of common questions and comments about
graphs is a partial list that will give you an overview of the remainder of the chapter.</p></introduction>
<ol marker="(1)">
<li><p>How can a graph be represented as a data structure for use on a computer? We will discuss some common data structures that are
used to represent graphs in Section 9.2.</p></li>
<li><p>Given two vertices in a graph, does there exist a path between them? The existence of a path between any or all pairs
of vertices in a graph will be discussed in Section 9.3. A related question is: How many paths of a certain type or length are there between two
vertices?</p></li>
<li><p> Is there a path (or circuit) that passes through every vertex (or uses every edge) exactly once? Paths of this kind are called traversals.
We will discuss traversals in Section 9.4.</p></li>
<li><p>Suppose that a cost is associated with the use of each vertex and/or edge in a path. What is the <q>cheapest</q> path, circuit, or traversal
of a given kind? Problems of this kind will be discussed in Section 9.5.</p></li>
<li><p>Given the specifications of a graph, or the graph itself, what is the best way to draw the graph? The desire for neatness alone makes this
a reasonable question, but there are other motivations. Another goal might be to avoid having edges of the graph cross one another. This is discussed in Section 9.6.</p></li>
</ol>
</list>
</subsection>

<exercises xml:id="exercises-9-1">
<title>Exercises</title>
<exercise number="1"><statement><p> What is the significance of the fact that there is a path connecting vertex <m>b</m> with every other vertex in <xref ref="fig-undirected-1" text="type-global"/>, as it applies to various situations that it models?</p></statement>
<answer>
<p>In <xref ref="fig-undirected-1" text="type-global" />, computer <m>b</m> can communicate with all other computers. In <xref ref="fig-undirected-2" text="type-global" />, there are direct roads to and from city <m>b</m>
to all other cities.</p></answer>
</exercise>
<exercise number="2"><statement><p> Draw a graph similar to <xref ref="fig-directed-graph-ex1" text="type-global"/> that represents the set of strings of 0's and 1's containing no more than two consecutive 1's in any part of the string.</p></statement>
<answer component="im">
          <figure xml:id="fig-sol-9-1-2">
                <caption>Solution to exercise 3 of Section 9.1
                </caption>
                <image width="75%" source="images/fig-sol-9-1-2.png">
                    <description><p>A directed graph with four vertices labeled start, zero, one and two. The edges (One,Zero),(Start,Zero),(Two,Zero) and (Zero,Zero) labeled 0; and edges (One,Two),(Start,One) and(Zero,One) labeled 1.</p></description>
                </image>
            </figure>
<p>Besides the start vertex, you need three vertices to capture the states of having most recently recorded zero, one or two consecutive 1's.
</p>
</answer>
</exercise>
<exercise number="3"><statement><p> Draw a directed graph that models the set of strings of 0's and 1's (zero or more of each) where all of the 1's must appear consecutively. </p></statement><answer>
            <figure xml:id="fig-sol-9-1-3">
                <caption>Solution to exercise 3 of Section 9.1
                </caption>
                <image width="75%" source="images/fig-sol-9-1-3.png">
                    <description><p>Solution to exercise 3 of Section 9.1</p></description>
                </image>
            </figure>
            </answer></exercise>
<exercise number="4"><statement><p> In the NCAA final-four basketball tournament, the East champion plays the West champion, and the champions from the Mideast and Midwest play. The winners of the two games play for the national championship. How many different single-elimination tournament graphs could occur?</p></statement>
<answer component="im">
<p>There are eight different tournament graphs that could occur. This follows from the rule of products.  There are two ways the edge connecting East and West can be directed.  The same for the edge connecting Mideast and Midwest.  The for each of the pair of outcomes for these two games, there are two orientations in the national championship game.
</p>
</answer>
</exercise>
<exercise number="5"><statement><p> What is the maximum number of edges in an undirected graph with eight vertices?</p></statement><answer><p>The maximum number of edges would be <m>\binom{8}{2} = \frac{(7)(8)}{2}=28</m>.</p></answer></exercise>
<exercise number="6"><statement><p> Which of the graphs in <xref ref="fig-exercise-9-1-6" text="type-global"/> are isomorphic? What is the correspondence between their vertices?</p>

<figure xml:id="fig-exercise-9-1-6">
                <caption>Which graphs are isomorphic to one another?
                </caption>
                <image width="100%" source="images/fig-exercise-9-1-6.png">
                    <description><p>Graph for exercise 6 of section 9.1</p></description>
                </image>
</figure>
</statement>
<answer component="im">
<p> <ul>
<li><p>(a) and (f) are isomorphic</p></li>
<li><p>(d) and (e) are isomorphic</p></li>
<li><p>(c) and (g) are isomorphic</p></li>
<li><p>(h) is not isomorphic to any others.  It is the only graph with two vertices of degree three.</p></li>
</ul>
</p>
</answer>
</exercise>
<exercise number="7"><statement>
<p><ol marker="(a)">
<li><p>How many edges does a complete tournament graph with <m>n</m> vertices have?</p></li>
<li><p>How many edges does a single-elimination tournament graph with <m>n</m> vertices have?</p></li>
</ol></p></statement>
<answer><p>
<ol marker="(a)">
<li><p> <m>\binom{n}{2}=\frac{(n-1)n}{2}</m></p></li>
<li><p><m>n-1</m>, each vertex except the champion vertex has an indegree of 1 and the champion vertex has an indegree of zero.</p></li>
</ol>
</p></answer>
</exercise>
<exercise number="8"><statement><p>Draw complete undirected graphs with 1, 2, 3, 4, 5 and 6 vertices. How many edges does a <m>K_n</m>, a complete undirected graph with <m>n</m> vertices, have?</p></statement>
<answer component="im">
           <figure xml:id="fig-k1-k3">
                <caption>The first three complete graphs
                </caption>
                <image width="75%" source="images/fig-k1-k3.png">
                    <description><p>Solution to exercise 8 of Section 9.1</p></description>
                </image>
            </figure>
           <figure xml:id="fig-k4-k6">
                <caption>The next three complete graphs
                </caption>
                <image width="75%" source="images/fig-k4-k6.png">
                    <description><p>Solution to exercise 8 of Section 9.1</p></description>
                </image>
            </figure>
            <p>In general, a complete graph with <m>n</m> vertices has <m>\binom{n}{2}</m> edges</p>
</answer>
</exercise>
<exercise number="9"><statement><p> Determine whether the following sequences are graphic. Explain your logic.</p>
<p><ol marker="(a)">
<li><p>  <m>(6, 5, 4, 3, 2, 1, 0)</m></p></li>
<li><p> <m>(2,2,2,2,2,2)</m></p></li>
<li><p> <m>(3,2,2,2,2,2)</m></p></li>
<li><p> <m>(5,3,3,3,3,3)</m></p></li>
<li><p> <m>(1,1,1,1,1,1)</m></p></li>
<li><p> <m>(5,5,4,3,2,1)</m></p></li>
</ol></p></statement>
<answer>
<p>
<ol marker="(a)">
<li><p>Not graphic - if the degree of a graph with seven vertices is 6, it is connected to all other vertices and so there cannot be a vertex with degree zero.</p></li>
<li><p>Graphic.  One graph with this degree sequence is a cycle of length 6.</p></li>
<li><p>Not Graphic. The number of vertices with odd degree is odd, which is impossible.</p></li>
<li><p>Graphic.  A "wheel graph" with one vertex connected to all other and the others connected to one another in a cycle has this degree sequence.</p></li>
<li><p>Graphic.  Pairs of vertices connected only to one another.</p></li>
<li><p>Not Graphic.  With two vertices having maximal degree, 5, every vertex would need to have a degree of 2 or more, so the 1 in this sequence makes it non-graphic.</p></li>
</ol>
</p>
</answer></exercise>
<exercise number="10"><statement>
<p><ol marker="(a)">
<li><p>Based on observations you might have made in exercise 9, describe as many characteristics as you can about graphic sequences of length
<m>n</m>.</p></li>
<li><p> Consider the two graphs in <xref ref="fig-same-ds-9-1" text="type-global"/>. Notice that they have the same degree sequences, <m>(2,2,2,2,2,2)</m>.  Explain why the two graphs are not isomorphic.</p></li>
</ol></p>

<figure xml:id="fig-same-ds-9-1">
                <caption>Two graphs with the same degree sequences
                </caption>
                <image width="100%" source="images/fig-same-ds-9-1.png">
                    <description><p>Two graphs with the same degree sequences</p></description>
                </image>
</figure>
</statement>
<answer component="im">
<p>A graphic sequence of length <m>n</m> is the degree sequence of at least one graph containing <m>n</m> vertices, and the sum of entries in the degree sequence is two times the number of edges.</p>
<p>The two graphs in the second part are not isomorphic for several reasons, some of which we haven't formally defined such as the fact that the graph on the left is not connected and the one on the right is connected.  Using just the definition of a graph isomorphism. Assume we can map the left graph to the right graph with an isomorphism, <m>f</m>.  Let <m>v</m> be any vertex on the left.  Then <m>f(v)</m> is some vertex on the right. If we call the two vertices that are connected to <m>v</m> the left <m>w_1</m> and <m>w_2</m>, then <m>f(w_1)</m> and <m>f(w_2)</m> must be the two vertices that are connected to <m>f(v)</m>, but notice that while <m>w_1</m> and <m>w_2</m> are connected with and edge, <m>f(w_1)</m> and <m>f(w_2)</m> are not connected, which contradicts the definition of a graph isomorphism.</p> 
</answer>
</exercise>

<exercise number="11" xml:id="exercise-house-9-1">
<statement><p>Draw a plan for the rooms of a house so that <xref ref="fig-undirected-1" text="type-global"/> models connectedness of the rooms.  That is, <m>(a,b)</m> is an edge if and only if a door connects rooms <m>a</m> and <m>b</m>. </p></statement></exercise>
<exercise number="12" xml:id="exercise-subgraphs">
<statement><p>How many subgraphs are there of a <m>K_n</m>, <m>n \geq 1</m>.  How many of them are spanning graphs?  Assume the vertices are distinguishable. For example, if <m>n=3</m> and we remove one edge from the <m>K_3</m>, we count three possible subgraphs depending on which edge is removed even though all three are isomorphic and would not be different if the vertices were indistinguishable.  </p></statement>
<answer component="im">
<p>The number of spanning subgraphs is <m>2</m> raised to the <m>\binom{n}{2}</m> since every edge can either be included or not included in a spanning subgraph. The number of subgraphs is more complicated. We can count the number of subgraphs containing <m>k</m> vertices by observing that there are <m>\binom{n}{k}</m> subsets of the <m>n</m> vertices that we can include.  Then for each of them there are <m>2^{\binom{k}{2}}</m> spanning subgraphs of the <m>k</m> vertices. Therefore, our answer is <me>\sum_{k=1}^n 2^{\binom{k}{2}} \binom{n}{k}.</me> Notice that the lower limit of the sum is <m>1</m> because we can have a graph with no vertices.   This sum doesn't seem to simplify.  See <url href="https://oeis.org/A004140">The On-Line Encyclopedia of Integer Sequences</url> for more information about this sequence. </p>
</answer>
</exercise>


</exercises>
</section>