<?xml version="1.0" encoding="UTF-8" ?>
<section xml:id="s-graph-optimization">
<title>Graph Optimization</title>
<idx>Graph Optimization</idx>
<introduction>
<p>The common thread that connects all of the problems in this section is the desire to optimize (maximize or minimize) a quantity that is associated with a graph. We will concentrate most of our attention on two of these problems, the Traveling Salesman Problem and the Maximum Flow Problem. At the close of this section, we will discuss some other common optimization problems.</p>
</introduction>
<subsection xml:id="ss-weighted-graph"><title>Weighted Graphs</title>

<definition xml:id="def-weighted-graph"><title>Weighted Graph</title><idx>Weighted Graph</idx><statement><p>A weighted graph, <m>(V, E, w)</m>, is a graph <m>(V, E)</m> together with a weight function <m>w: E \to \mathbb{R}</m>.
If <m>e \in  E</m>, <m>w(e)</m> is the weight on edge <m>e</m>.</p></statement></definition>

 
<p>As you will see in our examples, <m>w(e)</m> is often a cost associated with the edge <m>e</m>; therefore, most weights will be positive.</p>



<example xml:id="ex-distance-graph"><title>A Distance Graph</title><p>Let <m>V</m> be the set of six capital cities in New England: Boston, Augusta, Hartford, Providence, Concord, and Montpelier. Let <m>E</m> be the set of all possible undirected edges between these cities.  So <m>(V,E)</m> is a complete unordered graph. An example of a weight function on this graph is <m>w\left(\{c_1, c _2\right\}) = \textrm{the distance, in miles, between } c_1 \textrm{ and } c_2</m>. </p>

<p>Many road maps that you could get at gas stations at one time defined distance functions as in the following table.</p>

<table   xml:id="table-ne-capitals">
<title>Distances between capital cities in New England</title>
<tabular top="major" halign="center">
<row><cell>--</cell><cell>Augusta</cell><cell>Boston</cell><cell>Concord</cell><cell>Hartford</cell><cell>Montpelier</cell><cell>Providence</cell></row>
<row><cell>Augusta, ME</cell><cell>--</cell><cell>165</cell><cell>148</cell><cell>266</cell><cell>190</cell><cell>208</cell></row>
<row><cell>Boston, MA</cell><cell>165</cell><cell>--</cell><cell>75</cell><cell>103</cell><cell>192</cell><cell>43</cell></row>
<row><cell>Concord, NH</cell><cell>148</cell><cell>75</cell><cell>--</cell><cell>142</cell><cell>117</cell><cell>109</cell></row>
<row><cell>Hartford, CT</cell><cell>266</cell><cell>103</cell><cell>142</cell><cell>--</cell><cell>204</cell><cell>70</cell></row>
<row><cell>Montpelier, VT</cell><cell>190</cell><cell>192</cell><cell>117</cell><cell>204</cell><cell>--</cell><cell>223</cell></row>
<row><cell>Providence, RI</cell><cell>208</cell><cell>43</cell><cell>109</cell><cell>70</cell><cell>223</cell><cell>--</cell></row>
</tabular>
</table>
 </example>

</subsection>
<subsection xml:id="ss-traveling-salesman-problem"><title>The Traveling Salesman Problem</title><idx>Traveling Salesman Problem, The</idx>
<p>The Traveling Salesman Problem is, given a weighted graph, to find a circuit <m>\left(e_1, e_2,\ldots ,e_n\right)</m> that visits every vertex at least once and minimizes the sum of the weights, <m>\sum_{i=1}^n w\left(e_i\right)</m>.  Any such circuit is called an  optimal path.</p>

<p>Some statements of the Traveling Salesman Problem require that the circuit be Hamiltonian. In many applications, the graph in question
will be complete and this restriction presents no problem.  If the weight on each edge is constant, for example, <m>w(e) = 1</m>, then an optimal path would be any Hamiltonian circuit.</p>

<example xml:id="ex-boston-salesman"><title>The problem of a Boston salesman</title><p> The Traveling Salesman Problem gets its name from the situation of a salesman who wants to minimize the number of miles that
he travels in visiting his customers. For example, if a salesman from Boston must visit the other capital cities of New England, then the problem is to find a circuit in the weighted graph of <xref ref="ex-distance-graph" text="type-global"/>. Note that distance and cost are clearly related in this case. In addition, tolls and traffic congestion might also be taken into account. 
</p></example>


<p>The search for an efficient algorithm that solves the Traveling Salesman has occupied researchers for years. If the graph in question is complete,
there are <m>(n -1)!</m> different circuits. As <m>n</m> gets large, it is impossible to check every possible circuit. The most efficient algorithms
for solving the Traveling Salesman Problem take an amount of time that is proportional to <m>n 2^n</m>. Since this quantity grows so quickly, we can't
expect to have the time to solve the Traveling Salesman Problem for large values of <m>n</m>. Most of the useful algorithms that have been developed
have to be heuristic; that is, they find a circuit that should be close to the optimal one. One such algorithm is the <q>closest neighbor</q> algorithm,
one of the earliest attempts at solving the Traveling Salesman Problem. The general idea behind this algorithm is, starting at any vertex, to visit
the closest neighbor to the starting point. At each vertex, the next vertex that is visited is the closest one that has not been reached. This shortsighted
approach typifies heuristic algorithms called  greedy algorithms, which attempt to solve a minimization (maximization) problem
by minimizing (maximizing) the quantity associated with only the first step.</p>

<algorithm xml:id="alg-closest-neighbor"><title>The Closest Neighbor Algorithm</title><idx>Closest Neighbor Algorithm</idx><statement> <p>Let <m>G = (V, E, w)</m> be a complete weighted graph with <m>|V| = n</m>. The closest neighbor
circuit through G starting at <m>v_1</m> is <m>\left(v_1, v_2,\ldots ,v_n\right)</m>, defined by the steps:</p>
<p><ol marker="(1)">
<li><p> <m>V_1= V-\left\{v_1\right\}</m>.</p></li>
<li><p>For <m>k= 2</m> to <m>n - 1</m> </p>
		<p><ol marker="(a)">
		<li><p> <m>v_k=</m> the closest vertex in <m>V_{k-1}</m> to <m>v_{k-1}</m></p>
	 <p>## <m>w\left(v_{k-1} , v _k\right) = \min  \left(w\left(v_{k-1} ,v\right) \mid v \in  V_{k-1}\right)</m></p>
 <p>## In case of a tie for closest, <m>v_k</m> may be chosen arbitrarily.</p></li>
		<li><p> <m>V_k= V_{k-1} - \left\{v_k \right\}</m></p></li>
		</ol></p></li>
	<li><p><m>v_n=</m> the only element of  <m>V_n</m></p></li>
</ol></p>
<p>The cost of the closest neighbor circuit is
<m>\sum_{k=1}^{n-1} w\left(v_k,v_{k+1}\right)+w\left(v_n,v_1\right)</m></p>
</statement>
</algorithm>

<example xml:id="ex-tsp-small-example"><title>A small example</title><p> The closest neighbor circuit starting at 1 in <xref ref="fig-small-tsp-example" text="type-global" /> is <m>(1,3,2,4,1)</m>, with a cost of 29. The optimal path is <m>(1,2,3,4,1)</m>,
with a cost of 27.</p>
          <figure xml:id="fig-small-tsp-example">
                <caption>A small example</caption>
                <image width="100%" source="images/fig-small-tsp-example.png">
                    <description>A small weighted graph</description>
                </image>
            </figure>
</example>



<p>Although the closest neighbor circuit is often not optimal, we may be satisfied if it is close to optimal. If <m>C_{opt}</m> and <m>C_{cn}</m>
are the costs of optimal and closest neighbor circuits in a graph, then it is always the case that <m>C_{opt}\leq C_{cn}</m> or <m>\frac{C_{cn}}{C_{opt}}\geq
1</m>. We can assess how good the closest neighbor algorithm is by determining how small the quantity <m>\frac{C_{cn}}{C_{opt}}</m> gets.
If it is always near 1, then the algorithm is good. However, if there are graphs for which it is large, then the algorithm may be discarded. Note
that in <xref ref="ex-tsp-small-example" text="type-global"/>, <m>\frac{C_{cn}}{C_{opt}} = \frac{29}{27}\approx 1.074</m>. A 7 percent increase in cost may or may not be considered
significant, depending on the situation.</p>

<example xml:id="ex-one-way-street"><title>The One-way Street</title><p> A salesman must make stops at vertices A, B, and C, which are all on the same one-way street. The graph in <xref ref="fig-directed-tsp-example" text="type-global" /> is weighted by the function <m>w(i, j)</m> equal to the time it takes to drive from vertex <m>i</m> to vertex <m>j</m>.</p>
       <figure xml:id="fig-directed-tsp-example">
                <caption>Traveling a one-way street</caption>
                <image width="100%" source="images/fig-directed-tsp-example.png">
                    <description>A small directed weighted graph</description>
                </image>
            </figure>

<p>Note that if <m>j</m> is down the one-way street from <m>i</m>, then <m>w(i, j) &lt; w(j, i)</m>. The values of <m>C_{opt}</m>, and <m>C_{cn}</m>
are 20 and 32, respectively. Verify that <m>C_{cn}</m> is 32 by using the closest neighbor algorithm. The value of <m>\frac{C_{cn}}{C_{opt}} = 1.6</m> is significant in this case since our salesman would spend 60 percent more time on the road if he used the closest neighbor algorithm.</p>
  </example>

<p>A more general result relating to the closest neighbor algorithm presumes that the graph in question is complete and that the weight function satisfies the conditions</p> 

<p><ul>
<li><p> <m>w(x, y) = w(y, x)</m> for all  <m>x</m>, <m>y</m> in the vertex set, and </p></li>
<li><p> <m>w(x, y) + w(y, z) \geq  w(x, z)</m> for all   <m>x</m>, <m>y</m>, <m>z</m> in the vertex set.</p></li>
</ul></p>



<p>The first condition is called the  symmetry condition and the second is the  triangle inequality.</p>

<theorem xml:id="th-cn-theorem-9-5"><statement><p>If <m>(V, E, w)</m> is a complete weighted graph on <m>n</m> vertices that satisfies the symmetry and triangle inequality conditions, then
<me>\frac{C_{cn}}{C_{opt}}\leq \frac{\lceil \log_2 (2n)\rceil}{2}</me></p></statement></theorem>


<observation>
<p>If <m>|V|=8</m>, then this theorem says that <m>C_{cn}</m> can be no larger than twice the size of <m>C_{opt}</m>; however,
it doesn't say that the closest neighbor circuit will necessarily be that far from an optimal circuit. The quantity <m>\frac{\left\lceil \log _2 (2n)\right\rceil
}{2}</m> is called an upper bound for the ratio <m>\frac{C_{cn}}{C_{opt}}</m>. It tells us only that things can't be any worse than the
upper bound. Certainly, there are many graphs with eight vertices such that the optimal and closest neighbor circuits are the same. What is left
unstated in this theorem is whether there are graphs for which the quantities are equal. If there are such graphs, we say that the upper
bound is  sharp.</p>
<p> The value of <m>\frac{C_{cn}}{C_{opt}}</m> in Example <xref ref="ex-one-way-street" /> is 1.6, which is greater than <m>\frac{\lceil \log _2 (2\cdot 4)\rceil}{2} = 1.5</m>; however, the weight function in this example does not satisfy the conditions of the theorem.</p>
</observation>



<example xml:id="ex-unit-square"><title>The Unit Square Problem</title><p>Suppose a robot is programmed to weld joints on square metal plates. Each plate must be welded at prescribed points on the square.
To minimize the time it takes to complete the job, the total distance that a robot's arm moves should be minimized. Let <m>d(P, Q)</m> be the distance
between <m>P</m> and <m>Q</m>. Assume that before each plate can be welded, the arm must be positioned at a certain point <m>P_0</m> . Given
a list of <m>n</m> points, we want to put them in order so that
      <me>d\left(P _0,P_1\right) + d\left(P_1,P _2 \right) +\cdots +d\left(P_{n-1},P_n\right)+ d\left(P_n ,P _0 \right)</me>
is as small as possible.</p></example>

<p>The type of problem that is outlined in the example above is of such importance that it is one of the most studied version of the Traveling Salesman Problem. What follows is the usual statement of the problem. Let <m>[0, 1] = \{x \in \mathbb{R} \mid \text{  }0 \leq x\leq  1\}</m>, and let <m>S = [0,1]^2</m>, the unit square. Given <m>n</m> pairs of real numbers <m>\left(x_1, y_1\right),\left(x_2,y_2\right), \dots , \left(x_n,y_n\right)</m>
in <m>S</m> that represent the <m>n</m> vertices of a <m>K_n</m>, find a circuit of the graph that minimizes the sum of the distances traveled
in traversing the circuit.</p>

<p>Since the problem calls for a circuit, it doesn't matter which vertex we start at; assume that we will start at <m>\left(x_1,y_1\right)</m>. Once the
problem is solved, we can always change our starting position. A function can most efficiently describe a circuit in this problem. Every bijection
<m>f: \{1, . . . , n\} \to  \{1, . . . , n\}</m> with <m>f(1) = 1</m> describes a circuit

<me>\left(x_1, y_1\right),\left(x_{f(2)},y_{f(2)}\right),\ldots ,\left(x_{f(n)},y_{f(n)}\right)</me>

There are <m>(n - 1)!</m> such bijections.  Since a circuit and its reversal have the same associated cost, there are <m>\frac{(n - 1)!}{2}</m> cases to consider.  An examination of all possible cases is not feasible for large values of <m>n</m>.</p>



<p>One popular heuristic algorithm is the strip algorithm: </p>

<heuristic xml:id="alg-strip-algorithm"><title>The Strip Algorithm</title><statement>
<p> Given <m>n</m> points in the unit square:</p>
<p>Phase 1:<ol marker="(1)">
<li><p>Divide the square into <m>\left\lceil \sqrt{n/2}\right\rceil</m> vertical strips, as in <xref ref="fig-strip-alg-tsp" text="type-global" />. Let d be the width of each strip. If a point lies on a boundary between two strips, consider it part of the left-hand strip.</p></li>
<li><p>Starting from the left, find the first strip that contains one of the points. Locate the starting point by selecting the first point that is encountered in that strip as you travel from bottom to top. We will assume that the first point is <m>\left(x_1,y_1\right)</m></p></li>
<li xml:id="step-1-3"><p>Alternate traveling up and down the strips that contain vertices until all of the vertices have been reached.</p></li>
<li><p>Return to the starting point.</p></li>
</ol></p>
<p>Phase 2:<ol marker="(1)">
<li><p>Shift all strips <m>d/2</m> units to the right (creating a small strip on the left).</p></li>
<li><p>Repeat Steps 1.2 through 1.4 of Phase 1 with the new strips.</p></li>
</ol></p>
<p>When the two phases are complete, choose the shorter of the two circuits obtained.</p>
</statement>
</heuristic>

           <figure xml:id="fig-strip-alg-tsp">
                <caption>The Strip Algorithm
                </caption>
                <image width="100%" source="images/fig-strip-alg-tsp.png">
                    <description>The Strip Algorithm</description>
                </image>
            </figure>

<p>Step <xref ref="step-1-3"/> may need a bit more explanation. How do you travel up or down a strip? In most cases, the vertices in a strip will be vertically distributed so that the order in which they are visited is obvious. In some cases, however, the order might not be clear, as in the third strip in Phase I of
<xref ref="fig-strip-alg-tsp" text="type-global" />. Within a strip, the order in which you visit the points (if you are going up the strip) is determined thusly: <m>\left(x_i,y_i\right)</m>
precedes <m>\left(x_j,y_j\right)</m> if <m>y_i &lt;y_j</m> or if <m>y_i=y_j</m> and <m>x_i &lt; x_j</m> . In traveling down a strip, replace <m>y_i &lt; y_j</m> with <m>y_i >y_j</m>.</p>


<p>The selection of <m>\left\lceil \sqrt{n/2}\right\rceil</m> strips was made in <xref ref="biblio-beardwood-1959" text="type-global"/>. It balances the problems
that arise if the number of strips is too small or too large. If the square is divided into too few strips, some strips may be packed with vertices
so that visiting them would require excessive horizontal motion. If too many strips are used, excessive vertical motion tends to be the result. An update on what is known about this algorithm is contained in <xref ref="biblio-sopowit-1983" text="type-global"/>.</p>



<p>Since the construction of a circuit in the square consists of sorting the given points, it should come as no surprise that the strip algorithm requires
a time that is roughly a multiple of <m>n \log  n</m> time units when <m>n</m> points are to be visited.</p>



<p>The worst case that has been encountered with this algorithm is one in which the circuit obtained has a total distance of approximately <m>\sqrt{2n}</m>
(see Sopowit et al.).</p>

</subsection>
<subsection xml:id="ss-networks-and-flows"><title>Networks and the Maximum Flow Problem</title><idx>Networks</idx>

<definition xml:id="def-network"><title>Network</title><idx>Network</idx>
<statement><p> A network is a simple weighted directed graph that contains two distinguished vertices called the  source and the  sink with the properties that the indegree of the source and outdegree of the sink are both zero, and source is connected to sink.  The weight function on a network is the capacity function, which has positive weights. </p></statement></definition>


<p>An example of a real situation that can be represented by a network is a city's water system. A reservoir would be the source, while a distribution
point in the city to all of the users would be the sink. The system of pumps and pipes that carries the water from source to sink makes up the remaining
network. We can assume that the water that passes through a pipe in one minute is controlled by a pump and the maximum rate is determined by the
size of the pipe and the strength of the pump. This maximum rate of flow through a pipe is called its capacity and is the information that the weight
function of a network contains.</p>

<example xml:id="ex-city-water"><title>A City Water System</title><p> Consider the system that is illustrated in <xref ref="fig-water-system" text="type-global" />. The numbers that appear next to each pipe indicate the capacity of
that pipe in thousands of gallons per minute. This map can be drawn in the form of a network, as in <xref ref="fig-water-network" text="type-global" />.
</p>
           <figure xml:id="fig-water-system">
                <caption>City Water System
                </caption>
                <image width="80%" source="images/fig-water-system.png">
                    <description>City Water System</description>
                </image>
            </figure>
 				<figure xml:id="fig-water-network">
                <caption>Flow Diagram for a City's Water Network
                </caption>
                <image width="80%" source="images/fig-water-network.png">
                    <description>City Water Network</description>
                </image>
            </figure>
<p>Although the material passing through this network is water, networks can also represent the flow of other materials, such as automobiles, electricity, bits, telephone calls, or patients in a health system.</p>
</example>
<problem xml:id="problem-maximal-flow"><title>The Maximum Flow Problem</title><statement>
<p>The Maximum Flow Problem is derived from the objective of moving the maximum amount of water or other material from the source to the sink. To measure this amount, we define a flow as a function <m>f: E \to \mathbb{R}</m> such that (1) the flow of material through any edge is nonnegative and no larger
than its capacity: <m>0 \leq  f(e) \leq  w(e)</m>, for all <m>e\in  E</m>; and (2) for each vertex other than the source and sink, the total amount of material that is directed into a vertex is equal to the total amount that is directed out:

<mdn><mrow xml:id="flow-rules">\begin{array}{ccc}
 \sum_{(x,v)\in E} f(x,v)  &amp; = &amp; \sum_{(v,y)\in E} f(v,y) \\
 \textrm{Flow into } v &amp; = &amp; \textrm{ Flow out of } v \\
\end{array}</mrow></mdn>

The summation on the left of <xref ref="flow-rules" /> represents the sum of the flows through each edge in <m>E</m> that has <m>v</m> as a terminal vertex.
The right-hand side indicates that you should add all of the flows through edges that initiate at <m>v</m>.</p>
</statement>
</problem>

<theorem xml:id="theorem-flow-inout"><title>Flow out of Source equals Flow in Sink</title>
<statement>
<p> If <m>f</m> is a flow, then
<m>\quad \quad</m><m>\sum_{(\text{source},v)\in E} f(\text{source},v)\text{  }=\sum_{(v,\text{sink})\in E} f(v,\text{sink})</m>  </p></statement>
<proof><p>Subtract the right-hand side of <xref ref="flow-rules" /> from the left-hand side. The result is: 
<me>\text{Flow into } v - \text{ Flow out of } v = 0</me>

 Now sum up these differences for each vertex in <m>V' = V - \{\text{source}, \text{sink}\}</m>. The result is
<mdn><mrow xml:id="proof-step-9-5">\sum_{v\in V'}  \left(\sum_{(x,v)\in E} f(x,v)-\sum_{(v,y)\in E} f(v,y)\right)= 0</mrow></mdn>
</p>

<p>Now observe that if an edge connects two vertices in <m>V'</m>, its flow appears as both a positive and a negative term in <xref ref="proof-step-9-5"/>. This means that the only positive terms that are not cancelled out are the flows into the sink. In addition, the only negative terms that remain are the flows out of the
source. Therefore,
<me>\sum_{(v,\text{sink})\in E} f(v,\text{sink})-\sum_{(\text{source},v)\in E} f(\text{source},v) =0</me></p>
</proof></theorem>
<definition xml:id="def-value-of-flow"><title>The Value of a Flow</title><idx>Value of a Flow</idx> <notation><usage><m>V(f)</m></usage><description>The value of flow <m>f</m></description></notation>
<statement><p>The two values <term>flow into the sink</term> and <term>flow out of the source</term> were proved to be equal in <xref ref="theorem-flow-inout" text="type-global" /> and this common value is called the <term>value of the flow</term>. It is denoted by <m>V(f)</m>. The value of a flow represents the amount of material that passes through the network with that flow.</p></statement></definition>
<p>Since the Maximum Flow Problem consists of maximizing the amount of material that passes through a given network, it is equivalent to finding a flow with the largest possible value. Any such flow is called a <term>maximal flow</term><idx>Maximal flow</idx>.</p>

<p>For the network in <xref ref="fig-water-network" text="type-global"/>, one flow is <m>f_1</m>, defined by <m>f_1\left(e_1\right)=25</m>, <m>f_1\left(e_2\right)=20</m>, <m>f_1\left(e_3\right)=0</m>,
<m>f_1\left(e_4\right)= 25</m>, and <m>f_1\left(e_5\right)=20</m>. The value of <m>f_1</m>, <m>V\left(f_1\right)</m>, is 45. Since the total flow into the sink
can be no larger than 50 (<m>w \left(e_4\right) + w \left(e_5\right) = 30 + 20</m>), we can tell that <m>f_1</m> is not very far from the solution. Can
you improve on <m>f_1</m> at all? The sum of the capacities into the sink can't always be obtained by a flow. The same is true for the sum of the
capacities out of the source. In this case, the sum of the capacities out of the source is 60, which obviously can't be reached in this network.</p>
<p>A solution of the Maximum Flow Problem for this network is the maximal flow <m>f_2</m>, where <m>f_2\left(e_1\right)=25</m>, <m>f_2\left(e_2\right)=25</m>,
<m>f_2\left(e_3\right)=5</m>, <m>f_2\left(e_4\right)= 30</m>, and <m>f_2\left(e_5\right)=20</m>, with <m>V\left(f_2\right) = 50</m>. This solution is not unique.
In fact, there is an infinite number of maximal flows for this problem.</p>
<p>There have been several algorithms developed to solve the Maximal Flow Problem. One of these is the Ford and Fulkerson Algorithm (FFA). The FFA consists of repeatedly finding paths in a network called flow augmenting paths until no improvement can be made in the flow that has been obtained.</p>

<definition xml:id="def-flow-augmenting-path"><title>Flow Augmenting Path</title><idx>Flow Augmenting Path</idx>
<statement><p>Given a flow <m>f</m> in a network <m>(V, E)</m>, a flow augmenting path with respect to <m>f</m> is a simple path from the
source to the sink using edges both in their forward and their reverse directions such that for each edge <m>e</m> in the path, <m>w(e) - f(e) > 0</m> if <m>e</m> is used in its forward direction and <m>f(e) > 0</m> if <m>e</m> is used in the reverse direction.
</p></statement></definition>

 


<example xml:id="example-water-augmenting"><title>Augmenting City Water Flow</title>
<p>For <m>f_1</m> in <xref ref="fig-water-network" text="type-global" />, a flow augmenting path would be<m>\left(e_2 , e_3 , e_4 \right)</m> since
<m>w\left(e_2\right)-f_1\left(e_2\right)= 15</m>, <m>w\left(e_3\right)-f_1\left(e_3\right)=5</m>, and <m>w\left(e_4\right)-f_1\left(e_4\right)=5</m>.</p>
<p>These positive differences represent unused capacities, and the smallest value represents the amount of flow that can be added to each edge in the path. Note that by adding 5 to each edge in our path, we obtain <m>f_2</m>, which is maximal. If an edge with a positive flow is used in its reverse direction, it is contributing a movement of material that is counterproductive to the objective of maximizing flow. This is why the
algorithm directs us to decrease the flow through that edge.</p></example>
 

<algorithm xml:id="alg-ford-fulkerson"><title>The Ford and Fulkerson Algorithm</title>
<statement>
<p><ol marker="(1)">
<li><p> Define the flow function <m>f_0</m> by <m>f_0(e)=0</m> for each edge <m>e \in  E</m>.</p></li>
<li><p>i = 0.</p></li>
<li><p>Repeat:</p>
		<p><ol marker="(a)">
		<li><p>If possible, find a flow augmenting path with respect to <m>f_i</m>.</p></li>
		<li><p>If a flow augmenting path exists, then:</p>
					<p><ol marker="(i)">
					<li><p>Determine
		   <me>\begin{split}
		     d &amp; = \min  \{\{w(e) - f_i(e) \mid e \text{ is used in the forward direction}\},\\
		     &amp; \quad \quad \quad \{f_i(e) \mid e \text{ is used in the reverse direction}\}\}\\
\\
		     \end{split}</me></p></li>

					<li><p>Define <m>f_{i+1}</m> by <me>\begin{array}{cc}
 f_{i+1}(e) = f_i(e) &amp;  \text{if } e \text{ is not part of the flow augmenting path} \\
 f_{i+1}(e)=f_i(e)+d &amp; \text{if } e \text{ is used in the forward direction} \\
 f_{i+1}(e)=f_i(e)-d &amp; \text{if } e \text{ is used in the reverse direction} \\
\end{array}</me></p></li>
					<li><p> <m>i = i + 1</m></p></li>
					</ol></p>
    </li>
    </ol></p>
    <p> until no flow augmenting path exists.</p></li>
<li><p>Terminate with a maximal flow <m>f_i</m></p></li>
</ol></p>
</statement>
</algorithm>

<list><title>Notes on the Ford and Fulkerson Algorithm</title>
<ol marker="(1)">
<li><p> It should be clear that every flow augmenting path leads to a flow of increased value and that none of the capacities of the network can be violated.</p></li>
<li><p> The depth-first search should be used to find flow augmenting paths since it is far more efficient than the breadth-first search in this situation. The depth-first search differs from the breadth-first algorithm  in that you sequentially visit vertices
until you reach a <q>dead end</q> and then backtrack.</p></li>
<li><p> There have been networks discovered for which the FFA does not terminate in a finite number of steps. These examples all have irrational capacities. It has been proven that if all capacities are positive integers, the FFA terminates in a finite number of steps. See Ford and Fulkerson, Even, or Berge for details.</p></li>
<li><p> When you use the FFA to solve the Maximum Flow Problem by hand it is convenient to label each edge of the network with the fraction <m>\frac{f_i(e)}{w(e)}</m>.</p></li>
</ol>
</list>

<algorithm xml:id="alg-depth-first-search"><title>Depth-First Search for a Flow Augmenting Path</title>
<statement>
<p> This is a  depth-first search for the Sink Initiating at the Source. Let <m>E'</m> be the set of directed edges that can be used in producing a flow augmenting path. Add to the network a vertex called  start and the edge <m>(\text{start}, \text{source}).</m></p>
<p><ol marker="(1)">
<li><p><m>S = </m>vertex set of the network.</p></li>
<li><p><m>p = </m>source <m>\quad \quad</m>  Move <m>p</m> along the edge <m>(start, source)</m> </p></li>
<li><p>while <m>p</m> is not equal to  start or  sink:</p>
			<p><ol marker="(a)">
			<li><p>if an edge in <m>E'</m> exists that takes you from <m>p</m> to another vertex in <m>S</m>:
<me>\quad \text{then set } p \text{ to be that next vertex and delete the edge from } E'</me>
<me>\quad \text{else reassign }p \text{ to be the vertex that }p\text{ was reached from (i.e., backtrack)}</me>.</p></li></ol></p></li>
<li><p><m>\text{if } p = \text{start:}</m> 
		<me>\text{ then no flow augmenting path exists.}</me>
		<me>\text{ else }p = \text{sink and you have found a flow augmenting path.}</me>
</p></li>
</ol></p>
</statement>
</algorithm>



<example xml:id="ex-fap-1"><title>A flow augmenting path going against the flow</title><p> Consider the network in <xref ref="fig-flow-example-before" text="type-global" />, where the current flow, <m>f</m>, is indicated by a labeling of the edges. </p>

            <figure xml:id="fig-flow-example-before">
                <caption>Current Flow
                </caption>
                <image width="80%" source="images/fig-flow-example-before.png">
                    <description>Current Flow</description>
                </image>
            </figure>

<p>The path
<m>\left(Source, v_2 , v_1,v_3 , Sink\right)</m> is a flow augmenting path that allows us to increase the flow by one
unit. Note that <m>\left(v_1,v_3\right)</m> is used in the reverse direction, which is allowed because <m>f\left(v_1,v_3\right)>0</m>. The value of
the new flow that we obtain is 8. This flow must be maximal since the capacities out of the source add up to 8. This maximal flow is defined by <xref ref="fig-updated-flow" text="type-global" />.</p>

            <figure xml:id="fig-updated-flow">
                <caption>Updated Flow
                </caption>
                <image width="80%" source="images/fig-updated-flow.png">
                    <description>Updated Flow</description>
                </image>
            </figure>
</example>
</subsection>
<subsection xml:id="ss-other-optimization"><title>Other Graph Optimization Problems</title>

<p><ol marker="(1)">
<li><p>  The Minimum Spanning Tree Problem: Given a weighted graph, <m>(V, E, w)</m>, find a subset <m>E'</m> of <m>E</m> with
the properties that <m>(V, E')</m> is connected and the sum of the weights of edges in <m>E'</m> is as small as possible. We will discuss this problem in Chapter 10.</p></li>
<li><p>  The Minimum Matching Problem: Given an undirected weighted graph, <m>(K, E, w)</m>, with an even number of vertices, pair up the vertices
so that each pair is connected by an edge and the sum of these edges is as small as possible. A unit square version of this problem has been studied extensively. See <xref ref="biblio-sopowit-1983"/> for details on what is known about this version of the problem. </p></li>
<li><p><idx><h>Center of a Graph</h></idx>  The Graph Center Problem: Given a connected, undirected, weighted graph, find a vertex (called a center) in the graph with the property that the distance from the center to every other vertex is as small as possible. <q>As small as possible</q> is  normally interpreted  as minimizing the maximum distance from the center to a vertex.
</p></li>
</ol></p>
</subsection>
<exercises xml:id="exercises-9-5">
<title>Exercises</title>



<exercise number="1"><statement><p> Find the closest neighbor circuit through the six capitals of New England starting at Boston. If you start at a different city, will you get a different circuit?</p></statement>
<answer><p> The circuit would be Boston, Providence, Hartford, Concord, Montpelier, Augusta, Boston. It does matter where you start. If you start in Concord,
for example, your mileage will be higher.</p></answer>
</exercise>
<exercise number="2"><statement><p> Is the estimate in <xref ref="th-cn-theorem-9-5" text="type-global" /> sharp for <m>n = 3</m>? For <m>n = 4</m>?</p></statement>
<answer component="im"><p>For <m>n=3</m> there is only one circuit and so the ratio in the theorem will be exactly <m>1</m>. The upper bound given by the theorem is <m>3/2</m>, so the estimate isn't sharp.  For <m>n=4</m> the theorem bounds the ratio to also be <m>3/2</m>. This doesn't appear to be sharp either.  However, the actual maximum ration seems to be at least <m>6/5</m>.  This can be seen by considering the graph in <xref ref="fig-sol-9-5-2" text="type-global" />, where we imagine <m>\epsilon</m> to be a very small positive real number. If we start at vertex <m>A</m>, the nearest neighbor circuit in this graph is <m>A, D, B, C, A</m> with a total cost of <m>6-2\epsilon</m>.  However, the circuit <m>A, B, D, C, A</m> has a total cost of <m>5+\epsilon</m>.  The ratio <m>\frac{6-2\epsilon}{5+\epsilon}</m> can be made as close to <m>6/5</m> as we want. </p>
          <figure xml:id="fig-sol-9-5-2">
                <caption>Updated Flow
                </caption>
                <image width="80%" source="images/fig-sol-9-5-2.png">
                    <description>A complete graph with vertices labeled A, B, C and D.  Edges are AB with weight 1+epsilon, AC with weight 2-epsilon, AD with weight 1, BC with weight 2-epsilon, BD with weight 1, CD with weight 1+epsilon.</description>
                </image>
            </figure>
</answer>

</exercise>
<exercise number="3"><statement><p> Given the following sets of points in the unit square, find the shortest circuit that visits all the points and find the circuit that is obtained
with the strip algorithm.</p>
<p><ol marker="(a)">
<li><p> <m>\{(0.1k, 0.1k) : k = 0, 1, 2, . . . , 10\}</m></p></li>
<li><p> <m>\{(0.1, 0.3), (0.3, 0.8), (0.5, 0.3), (0.7, 0.9), (0.9, 0.1)\}</m></p></li>
<li><p> <m>\{(0.0, 0.5), (0.5, 0.0), (0.5, 1.0), (1.0, 0.5)\}</m></p></li>
<li><p> <m>\{(0, 0), (0.2, 0.6), (0.4, 0.1), (0.6, 0.8), (0.7, 0.5)\}</m></p></li>
</ol></p>
</statement>
<answer>
<p><ol marker="(a)"><li><p> Optimal cost <m>=2\sqrt{2}</m>.
Phase 1 cost <m>=2.4\sqrt{2}</m>.
Phase 2 cost <m>=2.6\sqrt{2}</m>.
</p></li>
<li><p> Optimal cost <m>=2.60.</m> 
Phase 1 cost <m>=3.00</m>. 
Phase 2 cost <m>2\sqrt{2}</m>.
</p></li>
<li><p>  <m>A=(0.0, 0.5), B=(0.5, 0.0), C=(0.5, 1.0), D=(1.0, 0.5)</m></p>
<p>There are 4 points; so we will divide the unit square into two strips.
<ul>
<li><p>Optimal Path: <m>(B,A,C,D)\quad \quad \text{Distance } =2\sqrt{2}</m></p></li>
<li><p>Phase I Path: <m>(B,A,C,D)\quad \quad \text{Distance }=2\sqrt{2}</m> </p></li>
<li><p>Phase II Path: <m>(A,C,B,D) \quad \quad\textrm{Distance }=2+\sqrt{2}</m></p></li>
</ul>
</p></li>
<li><p> <m>A=(0,0), B=(0.2,0.6), C=(0.4,0.1), D=(0.6,0.8), E=(0.7,0.5)</m></p>
<p>There are 5 points; so we will divide the unit square into three strips.
<ul>
<li><p>Optimal Path: <m>(A,B,D,E,C)\quad \quad \text{Distance }=2.31</m></p></li>
<li><p>Phase I Path: <m>(A,C,B,C,E)\quad \quad \text{Distance }= 2.57</m></p></li>
<li><p>Phase II Path: <m>(A,B,D,E,C) \quad \quad\textrm{Distance }=2.31</m></p></li>
</ul>
</p></li>
</ol></p>
</answer>
</exercise>
<exercise number="4"><statement><p> For <m>n = 4, 5, \text{and } 6</m>, locate <m>n</m> points in the unit square for which the strip algorithm works poorly.</p></statement></exercise>
<exercise number="5"><statement><p> Consider the network whose maximum capacities are shown on the following graph.</p>

       <figure xml:id="fig-exercise-9-5-5"><caption/>
                <image width="100%" source="images/fig-exercise-9-5-5.png">
                    <description>Figure for Exercise 9-5-5</description>
                </image>
            </figure>
<p><ol marker="(a)">
<li><p> A function <m>f</m> is partially defined on the edges of this network by:
<m>f(\text{Source}, c) =2</m>, <m>f(\text{Source}, b) =2</m>, <m>f(\text{Source}, a) = 2</m>, and <m>f(a, d) = 1</m>.  Define <m>f</m> on the rest of the other edges so that <m>f</m> is a flow. What is the value of  <m>f</m> ?</p></li>
<li><p> Find a flow augmenting path with respect to <m>f</m> for this network. What is the value of the augmented flow?</p></li>
<li><p> Is the augmented flow a maximum flow? Explain.</p></li>
</ol></p>
</statement>
<answer><p><ol marker="(a)"><li><p> <m>f(c,d)=2</m>, <m>f(b,d)=2</m>, <m>f(d,k)=5</m>, <m>f(a,g)=1</m>, and <m>f(g,k)=1</m>.
</p></li>
<li><p>  There are three possible flow-augmenting paths.

<m>s,b,d,k</m> with flow increase of 1.
<m>s,a,d,k</m> with flow increase of 1, and
<m>s,a,g,k</m> with flow increase of 2.
</p></li>
<li><p>  The new flow is never maximal, since another flow-augmenting path will always exist. For example, if <m>s,b,d,k</m> is used above, the new flow
can be augmented by 2 units with <m>s,a,g,k</m>.
</p></li>
</ol></p>
</answer>

</exercise>
<exercise number="6"><statement><p> Given the following network with capacity function <m>c</m> and flow function <m>f</m>, find a maximal flow function. The labels on the edges of the network are of the form <m>f(e)/c(e)</m>, where <m>c(e)</m> is the capacity of edge <m>e</m> and <m>f(e)</m> is the used capacity for flow
<m>f</m>.</p>
      <figure xml:id="fig-exercise-9-5-6"><caption/>
                <image width="70%" source="images/fig-exercise-9-5-6.png">
                    <description>Figure for Exercise 9-5-6</description>
                </image>
            </figure>

</statement></exercise>
<exercise number="7"><statement><p> Find maximal flows for the following networks.</p>
   <sidebyside>
      <figure xml:id="fig-exercise-9-5-7a"><caption/>
                <image width="100%" source="images/fig-exercise-9-5-7a.png">
                    <description>Figure for Exercise 9-5-7a</description>
                </image>
            </figure>
      <figure xml:id="fig-exercise-9-5-7b"><caption/>
                <image width="100%" source="images/fig-exercise-9-5-7b.png">
                    <description>Figure for Exercise 9-5-7b</description>
                </image>
            </figure>
   </sidebyside>

      <figure xml:id="fig-exercise-9-5-7c"><caption/>
                <image width="70%" source="images/fig-exercise-9-5-7c.png">
                    <description>Figure for Exercise 9-5-7c</description>
                </image>
            </figure>
</statement>
<answer><p><ol marker="(a)"><li><p> Value of maximal flow <m>=31</m>.</p></li>
<li><p> Value of maximal flow <m>=14</m>.</p></li>
<li><p> Value of maximal flow <m>=14</m>. See <xref ref="table-solution-9-5-7" text="type-global"/> for one way to got this flow.</p></li>
</ol></p>
<table xml:id="table-solution-9-5-7"><title/>
<tabular top="major" halign="center">
<row><cell>Step</cell><cell>Flow-augmenting path</cell><cell>Flow added</cell></row>
<row><cell>1</cell><cell><m>\text{Source},A,\text{Sink}</m></cell><cell>2</cell></row>
<row><cell>2</cell><cell><m>\text{Source}, C,B, \text{Sink}</m></cell><cell>3</cell></row>
<row><cell>3</cell><cell><m>\text{Source},E,D, \text{Sink}</m></cell><cell>4</cell></row>
<row><cell>4</cell><cell><m>\text{Source},A,B,\text{Sink}</m></cell><cell>1</cell></row>
<row><cell>5</cell><cell><m>\text{Source},C,D, \text{Sink}</m></cell><cell>2</cell></row>
<row><cell>6</cell><cell><m>\text{Source},A,B,C,D, \text{Sink}</m></cell><cell>2</cell></row>
</tabular>
</table>
</answer>
</exercise>

<exercise number="8"><statement>
<p><ol marker="(a)">
<li><p>Find two maximal flows for the network in <xref ref="fig-flow-example-before" text="type-global" /> other than the one found in the text.</p></li>
<li><p>Describe the set of all maximal flows for the same network.</p></li>
<li><p>Prove that if a network has two maximal flows, then it has an infinite number of maximal flows.</p></li>
</ol></p>
</statement></exercise>
<exercise number="9"><statement> <p>Discuss reasons that the closest neighbor algorithm is not used in the unit square version of the Traveling Salesman Problem.</p></statement>
<hint><p>Count the number of comparisons of distances that must be done.</p></hint>
<answer><p> To locate the closest neighbor among the list of <m>k</m> other points on the unit square requires a time proportional to <m>k</m>. Therefore
the time required for the closest-neighbor algorithm with <m>n</m> points is proportional to <m>(n-1)+(n-2)+\cdots +2+1</m>, which is proportional
to <m>n^2</m>. Since the strip algorithm takes a time proportional to <m>n(\log  n)</m>, it is much faster for large values of <m>n</m>.
</p></answer>
</exercise>


<exercise number="10"><statement><p> Explore the possibility of solving the Traveling Salesman Problem in the <q>unit box</q>: <m>[0,1]^3</m>.</p></statement></exercise>
<exercise number="11"><statement><p> Devise a <q>closest neighbor</q> algorithm for matching points in the unit square.
</p></statement>
</exercise>

</exercises>
</section>