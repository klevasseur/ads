<?xml version="1.0" encoding="UTF-8"?>
<section xml:id="s-spanning-trees">
<title>Spanning Trees</title>
<idx>Spanning Trees</idx>	

<subsection><title>Motivation</title>


<p>The topic of spanning trees is motivated by a graph-optimization problem.</p>



<p>A graph of  Atlantis University  (<xref ref="fig-atlantis-10" text="type-global"/>) shows that there are four campuses in the system. A new secure communications system
is being installed and the objective is to allow for communication between any two campuses; to achieve this objective, the university must buy direct
lines between certain pairs of campuses. Let <m>G</m> be the graph with a vertex for each campus and an edge for each direct line. Total communication
is equivalent to <m>G</m> being a connected graph. This is due to the fact that two campuses can communicate over any number of lines. To minimize
costs, the university wants to buy a minimum number of lines.</p>

            <figure xml:id="fig-atlantis-10">
                <caption>Atlantis University Graph
                </caption>
                <image width="100%" source="images/fig-atlantis-10.png">
                    <description><p>Atlantis University Graph</p></description>
                </image>
            </figure>

<p>The solutions to this problem are all trees. Any graph that satisfies the requirements of the university must be connected, and if a cycle does exist,
any line in the cycle can be deleted, reducing the cost. Each of the sixteen trees that can be drawn to connect the vertices North, South, East,
and West (see <xref ref="exercise-trees" text="type-global"/>) solves the problem as it is stated. Note that in each case, three direct lines must be purchased. There are two considerations that can help reduce the number of solutions that would be considered.</p>


<p><ul>
<li><p>Objective 1: Given that the cost of each line depends on certain factors, such as the distance between the campuses, select a tree whose cost is as low as possible.</p></li>
<li><p>Objective 2: Suppose that communication over multiple lines is noisier as the number of lines increases. Select a tree with the property that
the maximum number of lines that any pair of campuses must use to communicate with is as small as possible.</p></li>
</ul></p>
<p>Typically, these objectives are not compatible; that is, you cannot always simultaneously achieve these objectives. In the case of the Atlantis university
system, the solution with respect to Objective 1 is indicated with solid lines in <xref ref="fig-atlantis-10" text="type-global" />. There are four solutions to the problem with respect
to Objective 2: any tree in which one campus is directly connected to the other three. One solution with respect to Objective 2 is indicated with
dotted lines in <xref ref="fig-atlantis-10" text="type-global" />. After satisfying the conditions of Objective 2, it would seem reasonable to select the cheapest of the four trees.</p>

</subsection>
<subsection><title>Definition</title>

<definition xml:id="def-spanning-tree"><title>Spanning Tree</title>
<idx>Spanning Tree</idx>
<statement><p>Let <m>G = (V, E)</m> be a connected undirected graph. A spanning tree for <m>G</m> is a <xref ref="def-subgraph">spanning subgraph</xref> of <m>G</m> that is a tree.</p>
</statement></definition>

 


<note>
<p><ol marker="(a)">
<li><p> If <m>(V, E')</m> is a spanning tree, <m>\lvert  E' \rvert  =\lvert  V \rvert  - 1</m>.</p></li>
<li><p> The significance of a spanning tree is that it is a minimal spanning set. A smaller set would not span the graph, while a larger set would have a cycle, which has an edge that is superfluous.
</p></li>
</ol></p>
</note>


<p>For the remainder of this section, we will discuss two of the many topics that relate to spanning trees. The first is the problem of finding Minimal Spanning Trees,
which addresses Objective 1 above. The second is the problem of finding Minimum Diameter Spanning Trees, which addresses Objective 2.</p>



<definition xml:id="def-min-spanning-tree"><title>Minimal Spanning Tree</title>
<idx>Minimal Spanning Tree</idx> 
<statement><p>Given a weighted connected undirected graph <m>G = (V, E, w)</m>, a minimal spanning tree is a spanning tree <m>(V, E')</m> for which <m>\sum_{e\in E'} w(e)</m> is as small as possible.</p></statement></definition>

</subsection>
<subsection><title>Prim's Algorithm</title>
<p>Unlike many of the graph-optimization problems that we've examined, a solution to this problem can be obtained efficiently. It is a situation in which a greedy algorithm works.</p>

<definition xml:id="def-bridge"><title>Bridge</title>
<idx>Bridge</idx>
<statement><p>Let <m>G = (V, E)</m> be an undirected graph and let <m>\{L, R\}</m> be a partition of <m>V</m>. A bridge between <m>L</m> and <m>R</m> is
an edge in <m>E</m> that connects a vertex in <m>L</m> to a vertex in <m>R</m>.
</p></statement></definition>


<theorem xml:id="theorem-10-2-1">
<statement><p>Let <m>G = (V, E, w)</m> be a weighted connected undirected graph. Let <m>V</m> be partitioned into two sets <m>L</m> and <m>R</m>. If <m>e^*</m>
is a bridge of least weight between <m>L</m> and <m>R</m>, then there exists a minimal spanning tree for <m>G</m> that includes <m>e^*</m>.</p></statement>
<proof><p>Suppose that no minimal spanning tree including <m>e^*</m> exists. Let <m>T = (V, E')</m> be a minimal spanning tree. If we add <m>e^*</m> to <m>T</m>, a cycle is created, and this cycle must contain another bridge, <m>e</m>, between <m>L</m> and <m>R</m>.
Since <m>w\left(e^*\right) \leq  w(e)</m>, we can delete <m>e</m> and the new tree, which includes <m>e^*</m> must also be a minimal spanning tree.</p></proof></theorem> 

<example xml:id="ex-some-bridges"><title>Some Bridges</title><p> The bridges between the vertex sets <m>\{a, b, c\}</m> and <m>\{d, e\}</m> in <xref ref="fig-bridges-10" text="type-global" /> are the edges <m>\{b, d\}</m> and <m>\{c, e\}</m>. According to the theorem above, a minimal spanning tree that includes <m>\{b, d\}</m> exists. By examination, you should be able to see that this is
true. Is it true that only the bridges of minimal weight can be part of a minimal spanning tree?</p>
           <figure xml:id="fig-bridges-10">
                <caption>Bridges between two sets
                </caption>
                <image width="100%" source="images/fig-bridges-10.png">
                    <description><p>Bridges between two sets</p></description>
                </image>
            </figure>
</example>

 
<p><xref ref="theorem-10-2-1" text="type-global" /> essentially tells us that a minimal spanning tree can be constructed recursively by continually adding minimally weighted bridges
to a set of edges.</p>

<algorithm xml:id="alg-prim"><title>Prim's Algorithm</title><idx>Prim's Algorithm</idx>
<statement><p>
Let <m>G = (V, E, w)</m> be a connected, weighted, undirected graph,
and let <m>v_0</m> be an arbitrary vertex in <m>V</m>. The following steps lead to a minimal spanning tree for <m>G</m>.  <m>L</m> and <m>R</m> will be sets of vertices
and <m>E'</m> is a set of edges.</p>
<p><ol marker="(1)">
<li><p> (Initialize) <m>L = V - \left\{v_0\right\}</m>;  <m>R = \left\{v_0\right\}</m>; <m>E' = \emptyset</m>.</p></li>
<li><p> (Build the tree) While <m>L\neq  \emptyset</m>:</p> 
		<p><ol marker="(1)">
		<li><p>Find <m>e^* = \left\{v_L,v_R\right\}</m>, a bridge of minimum weight between <m>L</m> and <m>R</m>.</p></li>
		<li><p> <m>R = R \cup  \left\{v_L \right\}</m>; <m>L = L - \left\{v_L\right\}</m> ; <m>E' =E'\cup  \left\{e^*\right\}</m></p></li>
		</ol></p></li>
<li><p>Terminate with a minimal spanning tree <m>(V, E')</m>.</p></li>
</ol></p>
</statement>
</algorithm>

<note>
<p><ol marker="(a)">
<li><p> If more than one minimal spanning tree exists, then the one that is obtained depends on <m>v_0</m> and the means by which <m>e^*</m> is selected in Step 2.</p></li>
<li><p> Warning: If two minimally weighted bridges exist between <m>L</m> and <m>R</m>, do not try to speed up the algorithm by adding both of them to <m>E</m>'.</p></li>
<li><p> That <xref ref="alg-prim" text="type-global" /> yields a minimal spanning tree can be proven by induction with the use of <xref ref="theorem-10-2-1" text="type-global" />.</p></li>
<li><p> If it is not known whether <m>G</m> is connected, <xref ref="alg-prim" text="type-global" /> can be revised to handle this possibility. The key change (in Step 2.1)
would be to determine whether any bridge at all exists between <m>L</m> and <m>R</m>. The condition of the while loop in Step 2 must also be
changed somewhat.</p></li>
</ol></p>
</note>

<example xml:id="ex-an-example"><title>A Small Example</title><p>Consider the graph in <xref ref="fig-weighted-graph-10" text="type-global" />. If we apply <xref ref="alg-prim" text="title" /> starting at <m>a</m>, we obtain the following edge list
in the order given: <m>\{a, f\}, \{f, e\}, \{e, c\}, \{c, d\}, \{f, b\}, \{b, g\}</m>. The total of the weights of these edges is 20. The method that
we have used (in Step 2.1) to select a bridge when more than one minimally weighted bridge exists is to order all bridges alphabetically by the vertex
in <m>L</m> and then, if further ties exist, by the vertex in <m>R</m>. The first vertex in that order is selected in Step 2.1 of the algorithm.</p>
       <figure xml:id="fig-weighted-graph-10">
       			<caption>A small weighted graph</caption>
               <image width="80%" source="images/fig-weighted-graph-10.png">
                    <description><p>A weighted graph</p></description>
                </image>
      </figure>
</example>




<definition xml:id="def-min-diameter-spanning-tree"><title>Minimum Diameter Spanning Tree</title><idx>Minimum Diameter Spanning Tree</idx> 
<statement><p>Given a connected undirected graph <m>G = (V, E)</m>, find a spanning tree <m>T = (V, E')</m> of <m>G</m> such that the longest path in <m>T</m> is as short as possible. A solution to this problem is relatively easy to obtain by combining the idea the center of a graph with the breadth first search.</p></statement></definition>


<example xml:id="ex-min-diameter-k5"><title>The Case for Complete Graphs</title><p> The Minimum Diameter Spanning Tree Problem is trivial to solve in a <m>K_n</m>. Select any vertex <m>v_0</m> and construct the spanning
tree whose edge set is the set of edges that connect <m>v_0</m> to the other vertices in the <m>K_n</m> . <xref ref="fig-min-diameter-k5" text="type-global" /> illustrates a solution for <m>n=5</m>.</p>

          <figure xml:id="fig-min-diameter-k5">
                <caption>Minimum diameter spanning tree for <m>K_5</m>
                </caption>
                <image width="80%" source="images/fig-min-diameter-k5.png">
                    <description><p>Minimum diameter spanning tree for K_5</p></description>
                </image>
            </figure>

</example>

<p>For incomplete graphs, a two-stage algorithm is needed. In short, the first step is to locate a <q>center</q> of the graph. The maximum distance
from a center to any other vertex is as small as possible. Once a center is located, a breadth-first search of the graph is used to construct the
spanning tree. </p>
</subsection>

<exercises xml:id="exercises-10-2">
<title>Exercises</title>
<exercise number="1"><statement><p> Suppose that after Atlantis University's phone system is in place, a fifth campus is established and that a transmission line can be bought
to connect the new campus to any old campus. Is this larger system the most economical one possible with respect to Objective 1? Can you always satisfy
Objective 2?</p>
</statement><answer><p> It might not be most economical with respect to Objective 1. You should be able to find an example to illustrate this claim. The new system can
always be made most economical with respect to Objective 2 if the old system were designed with that objective in mind.
</p></answer></exercise>
<exercise number="2"><statement><p> Construct a minimal spanning tree for the capital cities in New England (see <xref ref="table-ne-capitals" text="type-global" />).</p>
</statement>
<solution component="im">
<p>Here is solution generated by SageMath</p>
	<sage>
	<input>
	edges=[("Boston", "Concord", 75), ("Boston", "Augusta", 165),
	 ("Augusta","Concord",148),("Hartford","Boston",103),
	 ("Hartford","Concord",142),("Hartford","Augusta",266),
	 ("Montpelier","Boston",192),("Montpelier","Concord",117),
	 ("Montpelier","Augusta",190),("Montpelier","Hartford",204),
	 ("Providence","Boston",43),("Providence","Concord",109),
	 ("Providence","Augusta",208),("Providence","Hartford",70),
	 ("Providence","Montpelier",223)]
	G=Graph(edges)
	G.weighted(True)
	G.graphplot(edge_labels=True,save_pos=True).show()
	from sage.graphs.spanning_tree import kruskal
	E=kruskal(G,check=True);E
	</input>
	<output>
	[('Boston', 'Providence', 43), ('Hartford', 'Providence', 70),('Boston', 'Concord', 75), ('Concord', 'Montpelier', 117),('Augusta', 'Concord', 148)]
	</output>
	</sage>
</solution>
</exercise>

<exercise number="3"><statement><p> Find a minimal spanning tree for the following graphs.</p>
            <figure xml:id="fig-exercise-10-2-4a"><caption/>
                <image width="80%" source="images/fig-exercise-10-2-4a.png">
                    <description><p>Figure for exercise-10-2-4a</p></description>
                </image>
            </figure>
            <figure xml:id="fig-exercise-10-2-4b"><caption/>
                <image width="80%" source="images/fig-exercise-10-2-4b.png">
                    <description><p>Figure for exercise-10-2-4b</p></description>
                </image>
            </figure>
            <figure xml:id="fig-exercise-10-2-4c"><caption/>
                <image width="70%" source="images/fig-exercise-10-2-4c.png">
                    <description><p>Figure for exercise-10-2-4c</p></description>
                </image>
            </figure>

</statement>
<solution>
	<p>
		<ol marker="(a)">
		<li><p>There are three minimal spanning tree, with edges
			 <m>\{0,5\},\{0,3\},\{4,5\}</m> and any two of the following edges <m>\{0,1\},\{0,2\},\{1,2\}.</m> </p></li>
		<li><p>There is only one minimal spanning tree.  If we start with BOS as the <q>right set</q>, the edges in the following set are ordered according to how they are added in Prim's Algorithm:  <me>\{\{BOS,NY\},\{NY,PHI\},\{PHI,DC\},\{DC,ATL\},\{PHI,KC\},\{KC,CHI\},\{KC,LA\},\{LA,SF\}\}.</me></p></li>
<li><p>There is only one minimal spanning tree, which has edges
			 <m>\{\{1,8\},\{2,8\},\{2,7\},\{3,7\},\{3,6\},\{4,6\},\{4,5\}\}</m></p></li>
				</ol>
	</p>
</ol>
</solution>
</exercise>
<exercise number="4"><statement><p>Find a minimal spanning tree for the following graph using Prim's algorithm starting at vertex 1.  Your tree will not be unique.  How many different minimal spanning trees are there?</p>
    <figure xml:id="fig-10-2-4-new"><caption/>
                <image width="80%" source="images/fig-10-2-4-new.png">
                    <description><p>A graph with several different minimal spanning trees.</p></description>
                </image>
            </figure>

</statement>
<solution component="im"><p>One example of a minimal spanning tree for this graph is 
<m>\{\{1,2\},\{2,3\},\{3,6\},\{6,4\},\{4,5\}\}</m>.  This is one of <m>27</m> different minimal spanning trees for this graph.	</p>
 </solution>
</exercise>




<exercise number="5"><statement><p> In each of the following parts justify your answer with either a proof or a counterexample.</p>
<p><ol marker="(a)">
<li><p> Suppose a weighted undirected graph had distinct edge weights. Is it possible that no minimal spanning tree includes the edge of minimal weight?</p></li>
<li><p> Suppose a weighted undirected graph had distinct edge weights. Is it possible that every minimal spanning tree includes the edge of maximal
weight? If true, under what conditions would it happen?</p></li>
</ol></p>
</statement>
<solution><p>
<ol marker="(a)">
<li><p> No, every minimal spanning tree will include the edge of minimal weight?  At some point, the edge of minimal weight will be part of a bridge between two sets and will be included in the spanning tree.</p></li>
<li><p>Yes, this will happen if the edge of maximal weight is the only bridge between two sets.</p></li>
</ol>
</p>
</solution>
</exercise>

<exercise number="6"><statement><p> Show that the answer to the question posed in <xref ref="ex-some-bridges" text="type-global" /> is <q>no.</q></p>
</statement>
<answer component="im"><p> In the figure below, <m>\{1,2\}</m> is not a minimal bridge between <m>L=\{1,4\} \textrm{ and } R=\{2,3\}</m>, but it is part of the minimal spanning tree
for this graph.</p>
     <figure xml:id="fig-sol-e-10-2-3"><caption/>
                <image width="80%" source="images/fig-sol-e-10-2-3.png">
                    <description><p>Solution to exercise 10-2-3</p></description>
                </image>
            </figure>
</answer>
</exercise>

<exercise number="7"><statement><p>Find a minimum diameter spanning tree for the following graphs.</p>
            <figure xml:id="fig-exercise-10-2-5a"><caption/>
                <image width="80%" source="images/fig-exercise-10-2-5a.png">
                    <description><p>Figure for exercise-10-2-5a</p></description>
                </image>
            </figure>
            <figure xml:id="fig-exercise-10-2-5b"><caption/>
                <image width="80%" source="images/fig-exercise-10-2-5b.png">
                    <description><p>Figure for exercise-10-2-5b</p></description>
                </image>
            </figure>
</statement>
<solution>
<p><ol marker="(a)"><li><p>Edges in one solution are: <m>\{8,7\},\{8,9\},\{8,13\},\{7,6\},\{9,4\},\{13,12\},\{13,14\},\{6,11\},\{6,1\},\{1,2\},\{4,3\},\{4,5\},\{14,15\},
\textrm{ and } \{5,10\}</m></p></li>
<li><p> Vertices 8 and 9 are centers of the graph. Starting from vertex 8, a minimum diameter spanning tree is <m>\{\{8, 3\}, \{8, 7\}, \{8, 13\},
\{8, 14\}, \{8, 9\}, \{3, 2\}, \{3, 4\}, \{7, 6\}, \{13, 12\}, \{13, 19\}, \{14, 15\}, \{9, 16\}, \{9, 10\}, \{6, 1\}, \{12, 18\}, \{16, 20\}, \{16,
17\}, \{10, 11\}, \{20, 21\}, \{11, 5\}\}.</m>    The diameter of the tree is 7.
</p></li></ol></p></solution>
</exercise>
</exercises>
</section>