<?xml version="1.0" encoding="UTF-8"?>
<section xml:id="app-alg1"><title>An Introduction to Algorithms</title>
<introduction><p>Most of the algorithms in this book will contain a combination of three
kinds of steps: the assignment step, the conditional step, and the loop.</p></introduction>
<subsection xml:id="ss-assignments"><title>Assignments</title><p>In order to assign a value to a variable, we use an assignment step, which takes the form:
<me>\textrm{Variable = Expression to be computed}</me>
The equals sign in most languages is used for assignment but some languages may use variations such as <c>:=</c> or a left pointing arrow. Logical equality, which produces a boolean result and would be used in conditional or looping steps, is most commonly expressed with a double-equals, <c>==</c>.</p>
<p> An example of an  assignment is <c>k = n - 1</c>
which tells us to subtract 1 from the value of <c>n</c> and assign that value to
variable <c>k</c>. During the execution of an algorithm, a variable may take on only
one value at a time. Another example of an assignment is <c>k = k - 1</c>. This
is an instruction to subtract one from the value of <c>k</c> and then reassign that value to <c>k</c>.</p>
</subsection>
<subsection xml:id="ss-conditionalstep"><title>Conditional steps</title>
<p>Frequently there are steps that must be performed in
an algorithm if and only if a certain condition is met. The conditional or
"if ... then" step is then employed. For example, suppose that in step 2 of
an algorithm we want to assure that the values of variables x and y satisfy the
condition <c>x &lt;= y</c>. The following step would accomplish this objective.</p>
<listing><caption>Code to be sure that x is not greater than y</caption> 
	<program>
		<code>
		2. If x > y:
			2.1 t = x
			2.2 x = y
			2.3 y = t
		</code>
	</program>
</listing>
<p>Steps 2.1 through 2.3 would be bypassed if the condition <c>x > y</c> were
false before step 2.</p>
<p>One slight variation is the "if ... then ... else" step, which allows
us to prescribe a step to be taken if the condition is false. For example, if
you wanted to exercise today, you might look out the window and execute
the following algorithm.</p>
<listing><caption>A plan for exercising</caption>
	<program>
	<code>
	1. If it is cold or raining:
			exercise indoors
		else: 
			go outside and run
	2. Rest
	</code>
	</program>
</listing>
</subsection>
<subsection xml:id="ss-loops"><title>Loops</title>
<p>The conditional step tells us to do something once if a logical condition is true. A  loop tells us to repeat one or more steps, called the body of the loop, while the logical condition is true. Before every
execution of the body, the condition is tested. The following flow diagram serves to illustrate the steps in a While loop.</p>
            <figure xml:id="fig-while-flow">
                <caption>Flow diagram for a while loop
                </caption>
                <image width="100%" source="images/while-flow.png">
                    <description><p>Flow diagram for a while loop</p></description>
                </image>
            </figure>

<p>Suppose you wanted to solve the equation <m>f(x) = 0</m>. The following initial
assignment and loop could be employed.</p>
<listing><caption/>
		<program>
		<code>
		1. c = your first guess
		2. While f(c) != 0:
				c = another guess
		</code>
		</program>
</listing>
<p>Caution: One must always guard against the possibility that the condition
of a While loop will never become false. Such "infinite loops" are the bane
of beginning programmers. The loop above could very well be such a situation,
particularly if the equation has no solution, or if the variable takes on real values</p>
<p>In cases where  consecutive integer values are to be
assigned to a variable, a different loop construction, a <em>For loop</em>, is often employed. For
example, suppose we wanted to assign variable <c>k</c> each of the integer values
from <c>m</c> to <c>n</c> and for each of these values perform some undefined steps. We
could accomplish this with a While loop:</p>
<listing><caption/>
	<program>
	<code>
	1. k := m
	2. While k &lt;= n:
		2.1 execute some steps
		2.2 k = k + l
	</code>
	</program>
</listing>
<p>Alternatively, we can perform these steps with a For loop.</p>
<listing><caption/>
<program>
<code>
For k = m to n:
	execute some  steps
</code>
</program>
</listing>
<p>For loops such as this one have the advantage of being shorter than the
equivalent While loop. The While loop construction has the advantage of being
able to handle more different situations than the For loop.</p>
</subsection>


<exercises xml:id="exercises-app-alg-1">
<title>Exercises</title>
<exercise number="1">
<statement><p>What are the inputs and outputs of the algorithms listed in the first
sentence of this section?</p></statement>
</exercise>
<exercise number="2">
<statement><p>What is wrong with this algorithm?</p>
<listing><caption/><program>
<code>
Input: a and b, integers
Output: the value of c will be a - b
(1) c = 0
(2) While a > b:
		(2.1) a := a - l
		(2.2) c := c + l
</code>
</program>
</listing>
</statement>
<answer><p>The algorithm only works when <c>a > b</c>.</p></answer>
</exercise>
<exercise number="3">
<statement><p>Describe, in words, what the following algorithm does:</p>
<listing><caption/><program>
<code>
Input: k, a positive integer
Output: s = ?
(1) s = 0
(2) While k > 0:
    (2.1) s = s + k
    (2.2) k = k - 1
</code>
</program></listing>
</statement>
</exercise>
<exercise number="4">
<statement>
<p>Write While loops to replace the For loops in the following partial
algorithms:</p>
<p>
<ol marker="(a)">
<li>	<p>
		<ol marker="(1)">
		<li><p><c>S = 0</c></p></li>
		<li><p><c>for k = 1 to 5:  S = S + k^2</c></p></li>
		</ol>
		</p>
</li>
<li><p>The floor of a number is the greatest integer less than or equal to that number.</p> 
<p>	<ol marker="(1)">
		<li><p>m = a positive integer greater than 1</p></li>
		<li><p>B = floor(sqrt(m))</p></li>
		<li><p>for i = 2 to B: if i divides evenly into m, jump to step 5</p></li>
		<li><p>print "m is a prime" and exit</p></li>
		<li><p>print "m is composite"  and exit</p></li>
		</ol>
</p></li>
</ol></p>
</statement>
</exercise>
<exercise number="5">
<statement><p> Describe in words what the following algorithm does:</p>
<listing><caption/>
<program>
<code>
Input: n, a positive integer
Output: k?
(1) f= 0
(2) k=n
(3) While k is even:
	(3.1) f = f+ 1
	(3.2) k = k div 2
</code>
</program>
</listing>
</statement>
</exercise>
<exercise number="6">
<statement><p>Fix the algorithm in Exercise 2.</p>
</statement>
</exercise>
</exercises>
</section>