<?xml version="1.0" encoding="UTF-8" ?>
<section xml:id="s-rooted-trees">
<title>Rooted Trees</title>
<idx>Rooted Trees</idx>



<introduction><p>In the next two sections, we will discuss rooted trees. Our primary foci will be on general rooted trees and on a special case, ordered binary
trees.</p></introduction>
<subsection xml:id="ss-rooted-trees"><title>Definition and Terminology</title>
          <figure xml:id="fig-rooted-tree-10-3">
                <caption>A Rooted Tree
                </caption>
                <image width="70%" source="images/fig-rooted-tree-10-3.png">
                    <description><p>A Rooted Tree</p></description>
                </image>
            </figure>

<list xml:id="list-rooted-tree-terms"><title>Informal Definition and Terminology</title><idx>genealogical terms</idx>
<introduction><p>What differentiates rooted trees from undirected trees is that a rooted tree contains a distinguished vertex, called the root. Consider the tree in <xref ref="fig-rooted-tree-10-3" text="type-global" />. Vertex <m>A</m> has been designated the root of the tree. If we choose any other vertex in the tree, such as <m>M</m>, we know that there is a unique path from <m>A</m> to <m>M</m>. The vertices on this path, <m>(A, D, K, M)</m>, are described in genealogical terms:</p></introduction>
<ul>
<li><p><m>M</m> is a child of <m>K</m> (so is <m>L</m>)</p></li>
<li><p><m>K</m> is <m>M</m>'s parent.</p></li>
<li><p><m>A</m>, <m>D</m>, and <m>K</m> are <m>M</m>'s ancestors.</p></li>
<li><p><m>D</m>, <m>K</m>, and <m>M</m> are descendants of <m>A</m>.</p></li>
</ul>
<conclusion><p>These genealogical relationships are often easier to visualize if the tree is rewritten so that children are positioned below their parents, as in
<xref ref="fig-rooted-tree-10-3-redrawn" text="type-global" />.</p>
<p>With this format, it is easy to see that each vertex in the tree can be thought of as the root of a tree that contains, in addition to itself, all
of its descendants. For example, <m>D</m> is the root of a tree that contains <m>D</m>, <m>K</m>, <m>L</m>, and <m>M</m>. Furthermore, <m>K</m> is the root of a tree that
contains <m>K</m>, <m>L</m>, and <m>M</m>. Finally, <m>L</m> and <m>M</m> are roots of trees that contain only themselves. From this observation, we can give a formal definition of
a rooted tree.</p></conclusion>
</list>
          <figure xml:id="fig-rooted-tree-10-3-redrawn">
                <caption>A Rooted Tree, redrawn
                </caption>
                <image width="70%" source="images/fig-rooted-tree-10-3-redrawn.png">
                    <description><p>A Rooted Tree, redrawn</p></description>
                </image>
            </figure>
<p>One can formally define the genealogical terms above. We define <em>child</em> here since it's used in our formal definition of a rooted tree and leave the rest of the definitions as an exercise.</p>
<definition xml:id="def-child-of-root"><title>Child of a Root</title>
<idx><h>Child</h><h>of a Root</h></idx><idx>Parent of a vertex</idx>
<statement><p>Given a rooted tree with root <m>v</m>, a child of <m>v</m> is a vertex that is connected to <m>v</m> by an edge of the tree. We refer to the root as the parent of each of its children.</p>
</statement>
</definition>
<definition xml:id="def-rooted-tree"><title>Rooted Tree</title>
<idx>Rooted Tree</idx>
<statement><p><ol marker="(a)">
<!-- 
<li><p> Basis:  A tree with no vertices is a rooted tree (the empty tree).</p></li> 
 -->
<li><p> A single vertex <m>v</m> with no children is a rooted tree with root <m>v</m>.</p></li>
<li><p> Recursion: Let <m>T_1, T_2,\ldots,T_r</m>, <m>r\geq 1</m>, be disjoint rooted trees with roots <m>v_1</m>, <m>v_2, \ldots </m>, <m>v_r</m>, respectively,
and let <m>v_0</m> be a vertex that does not belong to any of these trees. Then a rooted tree, rooted at <m>v_0</m>, is obtained by making <m>v_0</m> the
parent of the vertices <m>v_1</m>, <m>v_2, \ldots</m>, and <m>v_r</m>. We call <m>T_1, T_2, \ldots, T_r</m> subtrees of the larger tree.</p></li>
</ol></p>
</statement>
</definition>


<p>The <term>level of a vertex</term><idx>Level of a vertex</idx> of a rooted tree is the number of edges that separate the vertex from the root. The level of the root is zero. The depth of
a tree is the maximum level of the vertices in the tree. The depth of a tree in <xref ref="fig-rooted-tree-10-3-redrawn" text="type-global" /> is three, which is the level of the vertices <m>L</m> and <m>M</m>. The vertices <m>E</m>, <m>F</m>, <m>G</m>, <m>H</m>, <m>I</m>, <m>J</m>, and <m>K</m> have level two. <m>B</m>, <m>C</m>, and <m>D</m> are at level
one and <m>A</m> has level zero.</p>



<example xml:id="ex-decision-tree"><title>A Decision Tree</title><p><xref ref="lunch" text="type-global" /> is a rooted tree with <c>Start</c> as the root. It is an example of what is called
a decision tree.</p></example>



<example xml:id="ex-data-structures"><title>Tree Structure of Data</title><p>One of the keys to working with large amounts of information is to organize it in a consistent,
logical way. A <term>data structure</term> is a scheme for organizing data.  A simple example of a data structure might be the information a college admissions department might keep on their applicants.  Items might look something like this:

<me>
\begin{split}
ApplicantItem &amp; = (FirstName,MiddleInitial,LastName,StreetAddress,\\
		&amp; City,State,Zip,HomePhone,CellPhone,EmailAddress,\\
		&amp; HighSchool,Major,ApplicationPaid,MathSAT,VerbalSAT,\\
		&amp; Recommendation1,Recommendation2,Recommendation3)
\end{split}
</me>
		

This structure is called a <q>flat file</q>.</p>

<p>
A spreadsheet can be used to arrange  data in this way. Although a <q>flat file</q> structure is often adequate, there are advantages to clustering
some the information.  For example the applicant information might be broken into four parts: name, contact information, high school, and application
data:

<me>
\begin{split}
ApplicantItem &amp; = ((FirstName,MiddleInitial, LastName),\\
  &amp;((StreetAddress,City,State,Zip),\\
  &amp; (HomePhone,CellPhone),EmailAddress),\\
  &amp;HighSchool,\\
  &amp;(Major,ApplicationPaid,(MathSAT,VerbalSAT),\\
  &amp;(Recommendation1,Recommendation2,Recommendation3))
\end{split}
</me>

The first item in each ApplicantItem is a list <m>(FirstName, MiddleInitial, LastName)</m>, with each item in that list being a single field of
the original flat file. The third item is simply the single high school item from the flat file. The application data is a list and one of
its items, is itself a list with the recommendation data for each recommendation the applicant has.
</p>

<p>The organization of this data can be visualized with a rooted tree such as the one in <xref ref="fig-applicant-tree" text="type-global" />.</p>

        <figure xml:id="fig-applicant-tree">
                <caption>Applicant Data in a Rooted Tree
                </caption>
                <image width="100%" source="images/fig-applicant-tree.png">
                    <description><p>Applicant Data in a Rooted Tree</p></description>
                </image>
         </figure>


<p>In general, you can represent a data item, <m>T</m>, as a rooted tree with <m>T</m> as the root and a subtree for each field. Those fields that are more than just one item are roots of further subtrees, while individual items have no further children in the tree.</p>

</example>
</subsection>

<subsection xml:id="ss-kruskal-algorithm"><title>Kruskal's Algorithm</title>
<p>An alternate algorithm for constructing a minimal spanning tree uses a forest of rooted trees. First we will describe the algorithm in its simplest
terms. Afterward, we will describe how rooted trees are used to implement the algorithm. Finally, we will demonstrate the SageMath implementation of the algorithm. In all versions of this algorithm, assume that <m>G = (V, E, w)</m> is a weighted undirected graph with
<m>\lvert V\rvert = m</m> and <m>\lvert E\rvert = n</m>.</p>

<algorithm><title>Kruskal's Algorithm - Informal Version</title>
<statement>
<p><ol marker="(1)">
<li><p>Sort the edges of <m>G</m> in ascending order according to weight. That is, 

<me>i \leq  j \Leftrightarrow w\left(e_j\right) \leq  w\left(e_j\right)</me>.</p></li>
<li><p> Go down the list from Step 1 and add edges to a set (initially empty) of edges so that the set does not form a cycle. When an edge that would create a cycle is encountered, ignore it. Continue examining edges until either <m>m - 1</m> edges have been selected or you have come to
the end of the edge list.  If <m>m - 1</m> edges are selected, these edges make up a minimal spanning tree for <m>G</m>. If fewer than <m>m - 1</m> edges
are selected, <m>G</m> is not connected.</p></li>
</ol></p>
</statement>
</algorithm>

<p> Step 1 can be accomplished using one of any number of standard sorting routines. Using the most efficient sorting routine, the time required
to perform this step is proportional to <m>n \log  n</m>. The second step of the algorithm, also of <m>n \log  n</m> time complexity, is the one that uses a forest of rooted trees to test for whether an edge should be added to the spanning set.</p>

<algorithm><title>Kruskal's Algorithm</title><idx>Kruskal's Algorithm</idx>
<statement>
<p><ol marker="(1)">
<li><p>Sort the edges of <m>G</m> in ascending order according to weight. That is, 
<me>i \leq  j \Leftrightarrow w\left(e_i \right) \leq  w\left(e_j\right)</me>.</p></li>
<li>
<p><ol marker="(1)">
		<li><p>Initialize each vertex in V to be the root of its own rooted tree.</p></li> 
		<li><p>Go down the list of edges until either a spanning tree is completed or the edge list has been exhausted. For each edge <m>e =\left\{v_1,v_2\right\}</m>, we can determine whether e can be added to the spanning set without forming a cycle by determining whether the root of <m>{v_1}'s</m> tree is equal to the root of <m>{v_2}'s</m> tree. If the two roots are equal, then ignore e. If the roots are different, then we can add e to the spanning set. In addition, we merge the trees that <m>v_1</m> and <m>v_2</m> belong to.  This is accomplished by either making <m>{v_1}'s</m> root the parent of <m>{v_2}'s</m> root or vice versa.</p></li></ol></p></li>
</ol></p>
</statement>
</algorithm>

<note>
<p><ol marker="(a)">
<li><p> Since we start the Kruskal's algorithm with <m>m</m> trees and each addition of an edge decreases the number of trees by one, we end the algorithm with one rooted tree, provided a spanning tree exists.</p></li>
<li><p> The rooted tree that we develop in the algorithm is not the spanning tree itself.
</p></li>
</ol></p>
</note>
</subsection>
<subsection xml:id="ss-sage-note-kruskal"><title>SageMath Note - Implementation of Kruskal's Algorithm</title><idx><h>SageMath Note</h><h>Kruskal's Algorithm</h></idx>

<p>Kruskal's algorithm has been implemented in Sage. We illustrate how the spanning tree for a weighted graph in can be generated.  First, we create such a graph</p>
<p>We will create a graph using  a list of triples of the form <m>(\text{vertex},\text{vertex}, \text{label})</m>. The <m>weighted</m> method
tells Sage to consider the labels as weights.</p>

<sage>
<input>
edges=[(1, 2, 4), (2, 8, 4), (3, 8, 4), (4, 7, 5), (6, 8, 5), (1, 3, 6), (1, 7, 6), (4, 5, 6), (5, 10, 9), (2, 10, 7), (4, 6, 7), (2, 4, 8), (1,8, 9), (1, 9, 9), (5, 6, 9), (1, 10, 10), (2, 9, 10), (4, 9, 10), (5, 9, 10), (6, 9, 10)]
G=Graph(edges)
G.weighted(True)
G.graphplot(edge_labels=True,save_pos=True).show()
</input>
</sage>
        <figure xml:id="sage_graph">
                <caption>Weighed graph, SageMath output  </caption>
                <image width="100%" source="images/sage_graph.png">
                    <description><p>SageMath Output - Weighted Graph</p></description>
                </image>
         </figure>

<p>Next, we load the kruskal function and use it to generate the list of edges in a spanning tree of <m>G</m>.</p> 
<sage>
<input>
from sage.graphs.spanning_tree import kruskal
E = kruskal(G, check=True);E
</input>
<output>
[(1, 2, 4), (1, 7, 6), (1, 9, 9), (2, 8, 4), (2, 10, 7), (3, 8, 4), (4, 5, 6), (4, 7, 5), (6, 8, 5)]
</output>
</sage>


<p>To see the resulting tree with the same embedding as <m>G</m>, we generate a graph from the spanning tree edges. Next, we set the positions of the vertices
to be the same as in the graph. Finally, we plot the tree.</p>

<sage>
<input>
T=Graph(E)
T.set_pos(G.get_pos())
T.graphplot(edge_labels=True).show()
</input>
</sage>
        <figure xml:id="sage_spanning_tree">
                <caption>Spanning tree, SageMath output  </caption>
                <image width="100%" source="images/sage_spanning_tree.png">
                    <description><p>SageMath Output - Spanning tree for weighted graph</p></description>
                </image>
         </figure>

</subsection>

<exercises xml:id="exercises-10-3">
<title>Exercises</title>

<exercise number="1"><statement> <p>Suppose that an undirected tree has diameter <m>d</m> and that you would like to select a vertex of the tree as a root so that the resulting
rooted tree has the smallest depth possible. How would such a root be selected and what would be the depth of the tree (in terms of <m>d</m>)?</p>
</statement>
<answer><p> Locate any simple path of length <m>d</m> and locate the vertex in position <m>\lceil d/2\rceil</m> on the path. The tree rooted at that vertex will have a depth of <m>\lceil d/2\rceil</m>, which is minimal.
</p></answer>
</exercise>
<exercise number="2"><statement><p> Use Kruskal's algorithm to find a minimal spanning tree for the following graphs. In addition to the spanning tree, find the final rooted tree in the algorithm.  When you merge two trees in the algorithm, make the root with the lower number the root of the new tree.</p>
         <figure xml:id="fig-exercise-10-3-2a"><caption/>
                <image width="100%" source="images/fig-exercise-10-3-2a.png">
                    <description><p>Figure for exercise 10-3-2a</p></description>
                </image>
            </figure>
         <figure xml:id="fig-exercise-10-3-2b"><caption/>
                <image width="100%" source="images/fig-exercise-10-3-2b.png">
                    <description><p>Figure for exercise 10-3-2b</p></description>
                </image>
            </figure>

</statement>
</exercise>

<exercise number="3"><statement><p>Suppose that information on buildings is arranged in records with five fields: the name of the building, its location, its owner, its height,
and its floor space. The location and owner fields are records that include all of the information that you would expect, such as street, city, and
state, together with the owner's name (first, middle, last) in the owner field. Draw a rooted tree to describe this type of record</p>
</statement>
<answer>
         <figure xml:id="fig-solution-10-3-3"><caption/>
                <image width="100%" source="images/fig-solution-10-3-3.png">
                    <description><p>Solution to exercise 10-3-3</p></description>
                </image>
         </figure>
</answer>
</exercise>
<exercise number="4"><statement><p>Step through Kruskal's Algorithm by hand to verify that the example of a minimal spanning tree using Sage in <xref ref="ss-sage-note-kruskal" text="type-global" /> is correct.</p>
</statement>
</exercise>

</exercises>
</section>

