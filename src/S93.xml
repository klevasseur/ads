<?xml version="1.0" encoding="UTF-8" ?>
<section xml:id="s-Connectivity">
<title>Connectivity</title>
<idx>Connectivity in Graphs</idx>
<introduction>
<p>This section is devoted to a question that, when posed in relation to the graphs that we have examined, seems trivial. That question is: Given two
vertices, <m>s</m> and <m>t</m>, of a graph, is there a path from <m>s</m> to  <m>t</m>?  If <m>s = t</m>, this question is interpreted
as asking whether there is a circuit of positive length starting at <m>s</m>. Of course, for the graphs we have seen up to now, this question
can be answered after a brief examination.</p>
</introduction>
<subsection xml:id="ss-connectivity-prelim"><title>Preliminaries</title>


<p>There are two situations under which a question of this kind is nontrivial. One is where the graph is very large and an <q>examination</q> of the
graph could take a considerable amount of time. Anyone who has tried to solve a maze may have run into a similar problem. The second interesting
situation is when we want to pose the question to a machine. If only the information on the edges between the vertices is part of the data structure
for the graph, how can you put that information together to determine whether two vertices can be connected by a path?</p>

<note><title>Connectivity Terminology</title><p> Let <m>v</m> and <m>w</m> be vertices of a directed graph. Vertex <m>v</m> is  connected to vertex
<m>w</m> if there is a path from <m>v</m> to <m>w</m>. Two vertices are  strongly connected if they are connected in both directions
to one another. A  graph is connected if, for each pair of distinct vertices, <m>v</m> and <m>w</m>, <m>v</m> is connected to <m>w</m>  or <m>w</m> is connected to <m>v</m>. A  graph is strongly connected if every pair of its vertices is strongly connected. For an
undirected graph, in which edges can be used in either direction, the notions of strongly connected and connected are the same.</p>
</note>

<theorem xml:id="theorem-9-3-1"><title>Maximal Path Theorem</title>
<statement><p>If a graph has <m>n</m> vertices and vertex <m>u</m> is connected to vertex <m>w</m>, then there exists a path from <m>u</m> to <m>w</m> of length no more than
<m>n</m>.</p></statement><proof><p>(Indirect): Suppose <m>u</m> is connected to <m>w</m>, but the shortest path from <m>u</m> to <m>w</m> has length <m>m</m>, where <m>m>n</m>. A vertex list for a path of length <m>m</m> will have <m>m + 1</m> vertices. This path can be represented as <m>\left(v_0,v_1,\ldots, v_m\right)</m>, where <m>v_0=u</m> and <m>v_m= w</m>. Note that since there are only <m>n</m> vertices in the graph and <m>m</m> vertices are listed in the path after <m>v_0</m>, we can apply the pigeonhole principle and be assured that there must be some duplication in the last <m>m</m> vertices of the vertex list, which represents a circuit in the path. This means that our path of minimum length can be reduced, which is a contradiction.</p>
</proof></theorem>
</subsection>

<subsection xml:id="ss-adjacency-matrix-method"><title>Adjacency Matrix Method</title><idx>Adjacency Matrix Method</idx>

<algorithm><title>Adjacency Matrix Method</title>
<statement>
<p>Suppose that the information about edges in a graph is stored in an adjacency matrix, <m>G</m>. The
relation, <m>r</m>, that <m>G</m> defines is <m>v r w</m> if there is an edge connecting <m>v</m> to <m>w</m>. Recall that the composition
of <m>r</m> with itself, <m>r^2</m>, is defined by <m>v r^2 w</m> if there exists a vertex <m>y</m> such that <m>v r y</m> and <m>y r w</m>; that is,
<m>v</m> is connected to <m>w</m> by a path of length 2. We could prove by induction that the relation <m>r^k</m>, <m>k\geq 1</m>, is defined by
<m>v r^k w</m> if and only if there is a path of length <m>k</m> from <m>v</m> to <m>w</m>. Since the transitive closure, <m>r^+</m>, is the
union of <m>r</m>, <m>r^2</m> <m>,r^3,\ldots</m>, we can answer our connectivity question by determining the transitive closure of <m>r</m>, which
can be done most easily by keeping our relation in matrix form. <xref ref="theorem-9-3-1" text="type-global"/> is significant in our calculations because it tells us that we need
only go as far as <m>G^n</m> to determine the matrix of the transitive closure. </p>
</statement>
</algorithm>



<p>The main advantage of the adjacency matrix method is that the transitive closure matrix can answer all questions about the existence of paths between any 
vertices. If <m>G^+</m> is the matrix of the transitive closure, <m>v_i</m> is connected to <m>v_j</m> if and only if <m>\left(G^+\right)_{i j }=1</m>. A directed
graph is connected if <m>\left(G^+\right)_{i j }=1</m> or <m>\left(G^+\right)_{j i}=1</m> for each <m>i\neq j</m>. A directed graph is strongly connected
if its transitive closure matrix has no zeros.</p>



<p>A disadvantage of the adjacency matrix method is that the transitive closure matrix tells us whether a path exists, but not what the path is.  The next algorithm will solve this problem.</p>

</subsection>

<subsection xml:id="ss-breadth-first-search"><title>Breadth-First Search</title><idx>Breadth-First Search</idx>
<p>We will describe the Breadth-First Search Algorithm first with an example.</p>

<p> The football team at Mediocre State University (MSU) has had a bad year, 2 wins and 9 losses. Thirty days after the end of the football season, the university trustees are meeting to decide whether to rehire the head coach; things look bad for him. However, on the day
of the meeting, the coach issues the following press release with results from the past year:</p>

<list><title>Press Release: MSU completes successful season</title>
<introduction><p>The Mediocre State University football team compared favorably with national champion Enormous State University this season.</p></introduction>
<ul>
<li><p>Mediocre State defeated Local A and M.</p></li>
<li><p>Local A and M defeated City College.</p></li>
<li><p>City College defeated Corn State U.</p></li>
<li><p>... (25 results later)</p></li>
<li><p>Tough Tech defeated Enormous State University (ESU).</p></li>
</ul>
<conclusion><p>...and ESU went on to win the national championship!</p></conclusion>
</list>
<p>The trustees were so impressed that they rehired the coach with a raise! How did the coach come up with such a list?</p>

<p>In reality, such lists exist occasionally and have appeared in newspapers from time to time. Of course they really don't prove anything since each team that defeated MSU in our example above can produce a similar, shorter chain of results. Since college football records are readily available, the coach could have found this list by trial and error. All that he needed to start with was that his team won at least one game. Since ESU lost one game, there was some hope of producing the chain.</p>

<p>The problem of finding this list is equivalent to finding a path in the tournament graph for last year's football season that initiates at MSU and ends at ESU. Such a graph is far from complete and is likely to be represented using edge lists. To make the coach's problem interesting,
let's imagine that only the winner of any game remembers the result of the game. The coach's problem has now taken on the flavor of a maze. To reach
ESU, he must communicate with the various teams along the path. One way that the coach could have discovered his list in time is by sending the following
messages to the coaches of the two teams that MSU defeated during the season:</p>

<note><p>When this example was first written, we commented that ties should be ignored. Most recent NCAA rules call for a tiebreaker in college football and so ties are no longer an issue. Email was also not common and we described the process in terms of letters, not email messages. Another change is that the coach could also have asked the MSU math department to use Mathematica or Sage to find the path!</p></note>

<list><title>The Coach's Letter</title>
<introduction><p>Dear Football Coach:</p>
<p>Please follow these directions exactly.</p></introduction>
<ol marker="(1)">
<li><p> If you are the coach at ESU, contact the coach at MSU now and tell him who sent you this message.</p></li>
<li><p> If you are not the coach at ESU and this is the first message of this type that you have received, then:</p>
<p><ul>
<li><p>Remember from whom you received this message.</p></li>
<li><p>Forward a copy of this message, signed by you, to each of the coaches whose teams you defeated during the past year. </p></li>
<li><p>Ignore this message if you have received one like it already.</p></li>
</ul></p></li>
</ol>
<conclusion><p><m>\quad \quad \quad \quad \quad </m>Signed,</p>
<p><m>\quad \quad \quad \quad \quad </m>Coach of MSU</p>
</conclusion>
</list>


<list><title>Observations</title>
<introduction><p>From the conditions of this message, it should be clear that if everyone cooperates and if coaches participate within a day of receiving
the message:</p></introduction>
<ol marker="(1)">
<li><p> If a path of length <m>n</m> exists from MSU to ESU, then the coach will know about it in <m>n</m> days.</p></li>
<li><p> By making a series of phone calls, the coach can construct a path that he wants by first calling the coach who defeated ESU (the person who sent ESU's coach that message). This coach will know who sent him a letter, and so on. Therefore, the vertex list of the desired path is constructed in reverse order.</p></li>
<li><p> If a total of <m>M</m> football games were played, no more than <m>M</m> messages will be sent out.</p></li>
<li><p> If a day passes without any message being sent out, no path from MSU to ESU exists.</p></li>
<li><p> This method could be extended to construct a list of all teams that a given team can be connected to. Simply imagine a series of letters like the one above sent by each football coach and targeted at every other coach.</p></li>
</ol>
</list>



<p>The general problem of finding a path between two vertices in a graph, if one exists, can be solved exactly as we solved the problem above. The following algorithm, commonly called a  breadth-first search, uses a stack.</p>

<aside xml:id="aside-stack">
<title>Stacks</title><idx>Stack</idx><p> A stack is a fundamental data structure in computer science. A common analogy used to describe stacks is a stack of plates.  If you put a plate on the top of a stack and then want to use a plate, it's natural to use that top plate.  So the last plate in is the first plate out.  <q>Last in, first out</q> is the short description of the rule for stacks.  This is contrast with a queue which uses a <q>First in, first out</q> rule.</p>   
</aside>

<algorithm xml:id="alg-breadth-first"><title>Breadth-first Search</title>
<idx>Breadth-first Search</idx>
<statement><p>A broadcasting algorithm for finding a path between vertex <m>i</m> and vertex <m>j</m> of a graph having <m>n</m> vertices. Each item <m>V_k</m> of a list <m>V=\left\{V_1, V_2, \ldots , V_n\right\}</m>, consists of a Boolean field <m>V_k.\text{found}</m> and an
integer field <m>V_k.\text{from}</m>. The sets <m>D_1</m>, <m>D_2, \dots</m>, called  depth sets, have the property that if  <m>k \in D_r</m>, then the shortest path from vertex <m>i</m> to vertex <m>k</m> is of length <m>r</m>. In Step 5, a stack is used to put the vertex list for the path from the vertex <m>i</m> to vertex <m>j</m> in the proper order. That stack is the output of the algorithm.</p>
<p><ol marker="(1)">
<li><p>Set the value <m>V_k.\text{found}</m> equal to False, <m>k = 1, 2, \dots , n</m></p></li>
<li><p><m>r = 0</m></p></li>
<li><p><m>V_i.\text{found}=True</m></p></li>
<li><p> <m>D_0= \{i\}</m></p></li>
<li><p> while <m>(\neg V_j.\text{found}</m>) and <m>\left(D_r\right.\neq \emptyset )</m></p>
		<p><ul><li><p><m>D_{r+1}=\emptyset</m></p></li>
			 <li><p> for each k in <m>D_r</m>:</p>
					<p><m>\quad</m>for each edge (k,t):</p>
					<p><m>\quad \quad </m>If <m>V_t.\text{found}</m> == False: </p>
					<p><m>\quad \quad \quad </m><m>V_t.\text{found}=\text{True}</m></p>
					<p><m>\quad \quad \quad </m><m>V_t.\text{from} = k</m></p>
					<p><m>\quad \quad \quad </m><m>D_{r+1}=D_{r+1}\cup \{t\}</m></p></li>
				<li><p><m>r = r + 1</m></p></li>
				</ul></p></li>		
<li><p>if <m>V_j.\text{found}</m>:</p>
		<p><ul><li><p><m>S = Empty Stack</m></p></li>
			<li><p><m>k=j</m></p></li>
			<li><p>while <m>V_k.\text{from} \neq  i</m>:</p>
			<p><m>\quad</m>Push <m>k</m> onto <m>S</m></p>
			<p><m>\quad</m><m>k = V_k.\text{from}</m></p>
			</li>
			<li><p>Push <m>k</m> onto <m>S</m></p></li>
			<li><p>Push <m>i</m> onto <m>S</m></p></li>
		</ul></p>
</li>
</ol></p>
</statement>
</algorithm>

<list><title>Notes on Breadth-first Search</title>
<ul>
<li><p>If <m>v_i</m> is the starting vertex and we initialize <m>v_i.found=False</m>, then the algorithm will find the shortest circuit containing <m>v_i</m>.  If that is of interest, we would also not initialize the depth of <m>V_i</m> to <m>\{i\}</m></p></li>
<li><p> This algorithm will produce one path from vertex <m>i</m> to vertex <m>j</m>, if one exists, and that path will be as short as possible.  If more than one path of this length exists, then the one that is produced depends on the order in which the edges are examined and the order in which the elements of <m>D_r</m> are examined in Step 4.</p></li>
<li><p> The condition <m>D_{r }\neq \emptyset</m> is analogous to the condition that no mail is sent in a given stage of the process, in which case MSU cannot be connected to ESU.</p></li>
<li><p> This algorithm can be easily revised to find paths to all vertices that can be reached from vertex <m>i</m>. Step 5 would be put off until a specific path to a vertex is needed since the information in <m>V</m> contains an efficient list of all paths. The algorithm can also be extended further to find paths between any two vertices.</p></li>
</ul>
</list>

<example xml:id="ex-search-example"><title>A simple example</title>
<p> Consider the graph below. The existence of a path from vertex 2 to vertex 3 is not difficult to determine by examination.
After a few seconds, you should be able to find two paths of length four. <xref ref="alg-breadth-first" text="type-global" /> will produce one of them.</p>

<figure xml:id="fig-example-9-3-1">
					<caption>A simple example of breadth-first search</caption>
                <image width="100%" source="images/fig-example-9-3-1.png">
                    <description><p>Example Graph for breadth-first search</p></description>
                </image>
</figure>



<p>Suppose that the edges from each vertex are sorted in ascending order by terminal vertex. For example, the edges from vertex 3 would be in the order <m>(3, 1), (3, 4), (3, 5)</m>. In addition, assume that in the body of Step 4 of the algorithm, the elements of <m>D_r</m> are used in ascending order.  Then at the end of Step 4, the value of <m>V</m> will be

 <me>\begin{array}{cccccccc}
 k &amp; 1 &amp; 2 &amp; 3 &amp; 4 &amp; 5 &amp; 6 &amp;   \\
 V_k.\text{found} &amp; T &amp; T &amp; T &amp; T &amp; T &amp; T &amp;   \\
 V_k.\text{from} &amp; 2 &amp; 4 &amp; 6 &amp; 1 &amp; 1 &amp; 4 &amp;   \\
 \text{Depth} \text{set} &amp; 1 &amp; 3 &amp; 4 &amp; 2 &amp; 2 &amp; 3 &amp; \\
\end{array}</me>

Therefore, the path <m>(2, 1, 4, 6, 3)</m> is produced by the algorithm. Note that if we wanted a path from 2 to 5, the information in <m>V</m> produces
the path (2, 1, 5) since <m>V_k.\text{from} = 1</m> and <m>V_1.\text{from} = 2</m>. A shortest circuit that initiates at vertex 2 is also available
by noting that <m>V_2.\text{from}=4</m>, <m>V_4\text{.from = 1}</m>, and <m>V_1.\text{from} = 2</m>; thus the circuit <m>(2, 1, 4, 2)</m> is the output of the algorithm.
</p></example>

</subsection>
<subsection xml:id="ss-ecc-rad-diameter"><title>Graph Measurements</title>
<p>If we were to perform a breadth first search from each vertex in a graph, we could proceed to determine several key measurements relating to the general connectivity of that graph.  From each vertex <m>v</m>, the distance from <m>v</m> to any other vertex <m>w</m>,  <m>d(v,w)</m>, is number of edges in the shortest path from <m>v</m> to <m>w</m>. This number is also the index of the depth set to which <m>w</m> belongs in a breath-first search starting at <m>v</m>.
<me>d(v,w) = i  \iff  w \in D_v(i)</me>
where <m>D_v</m> is the family of depth sets starting at <m>v</m>.</p>
<p>If the vector of <q>from-values</q> is known from the breath-first search, then the distance can be determined recursively as follows:
<me>d(v,v) =0</me>
<me>d(v,w) = 1 + d(v,w.from) \textrm{ if }w\neq v</me>
</p>
<example xml:id="e-computing-distances"><title>Computing Distances</title>
<figure xml:id="fig-compute-distance-graph">
			<caption>Graph Measurements Example</caption>
				 <image width="75%" source="images/fig-compute-distance-graph.png">
                    <description><p>An undirected graph with 12 vertices having dictionary representation {1:[6,7,10],2:[7,9,12],3:[10],4:[6,8,10],5:[9,11],6:[7,11],7:[10,12],9:[11]}</p></description>
                </image>
</figure>
<p>Consider <xref ref="fig-compute-distance-graph"/>.  If we perform a breadth first search of this graph starting at vertex 2, for example, we get the following <q>from data</q> telling us from what vertex each vertex is reached.
<me>\begin{array}{ccccccccccccc}
 \text{vertex} &amp; 1 &amp; 2 &amp; 3 &amp; 4 &amp; 5 &amp; 6
   &amp; 7 &amp; 8 &amp; 9 &amp; 10 &amp; 11 &amp; 12 \\
 \text{vertex.from} &amp; 7 &amp; 2 &amp; 10 &amp; 6 &amp;
   9 &amp; 7 &amp; 2 &amp; 4 &amp; 2 &amp; 7 &amp; 9 &amp; 2 \\
\end{array}</me>
  For example, 4.from has a value of 6.  We can compute <m>d(2,4)</m>:
	<me>\begin{split}
			d(2,4) &amp;= 1+d(2,4.from)= 1+d(2,6)\\
				&amp;=2+d(2,6.from)=2+d(2,7)\\
				&amp;=3+d(2,7.from)=3+d(2,2)\\
				&amp;=3
		\end{split}</me>
		</p>
</example>
<p>Once we know distances between any two vertices, we can determine the eccentricity of each vertex; and the graph's diameter, radius and center.  First, we define these terms precisely.</p>  
<p>	
<notation>
	<usage><m>e(v)</m></usage>
	<description>The eccentricity of a vertex</description>
</notation>		

<notation>
	<usage><m>d(G)</m></usage>
	<description>The diameter of graph<m>G</m></description>
</notation>
<notation>
	<usage><m>r(G)</m></usage>
	<description>The radius of graph <m>G</m></description>
</notation>
	<notation>
		<usage><m>C(G)</m></usage>
		<description>The center of graph <m>G</m></description>
</notation>
		<dl width="narrow">
                    <li><title>Eccentricity of a Vertex</title><idx>Eccentricity of a vertex</idx>
                        
                        <p>The maximum distance from a vertex to all other vertices, <m>e(v)=\max_{w}\,d(v,w)</m>.</p>
                    </li>
                    <li>
                        <title>Diameter of a Graph</title><idx>Diameter of a Graph</idx>
                        
                        <p>The maximum eccentricity of vertices in a graph, denoted <m>d(G)</m>.</p>
                    </li>
                    <li>
                        <title>Radius of a Graph</title><idx>Radius of a graph</idx>
                        
                        <p>The minimum eccentricity of vertices in a graph, denoted <m>r(G)</m>.</p>
                    </li>
                    <li>
                        <title>Center of a Graph</title><idx>Center of a graph</idx>
                        
                        <p>The set of vertices with minimal eccentricity, <m>C(G)=\{v\in V \mid e(v)=r(G)\}</m></p>
                    </li>
                </dl></p>

<example xml:id="e-distance-matrix"><title>Measurements from distance matrices</title>
<p>If we compute all distances between vertices, we can summarize the results in a distance matrix, where the entry in row <m>i</m>, column <m>j</m> is the distance from vertex <m>i</m> to vertex <m>j</m>.  For the graph in <xref ref="e-computing-distances"/>, that matrix is 
		<me>\left(
		\begin{array}{cccccccccccc}
		 0 &amp; 2 &amp; 2 &amp; 2 &amp; 3 &amp; 1 &amp; 1 &amp; 3 &amp; 3 &amp; 1
		   &amp; 2 &amp; 2 \\
		 2 &amp; 0 &amp; 3 &amp; 3 &amp; 2 &amp; 2 &amp; 1 &amp; 4 &amp; 1 &amp; 2
		   &amp; 2 &amp; 1 \\
		 2 &amp; 3 &amp; 0 &amp; 2 &amp; 5 &amp; 3 &amp; 2 &amp; 3 &amp; 4 &amp; 1
		   &amp; 4 &amp; 3 \\
		 2 &amp; 3 &amp; 2 &amp; 0 &amp; 3 &amp; 1 &amp; 2 &amp; 1 &amp; 3 &amp; 1
		   &amp; 2 &amp; 3 \\
		 3 &amp; 2 &amp; 5 &amp; 3 &amp; 0 &amp; 2 &amp; 3 &amp; 4 &amp; 1 &amp; 4
		   &amp; 1 &amp; 3 \\
		 1 &amp; 2 &amp; 3 &amp; 1 &amp; 2 &amp; 0 &amp; 1 &amp; 2 &amp; 2 &amp; 2
		   &amp; 1 &amp; 2 \\
		 1 &amp; 1 &amp; 2 &amp; 2 &amp; 3 &amp; 1 &amp; 0 &amp; 3 &amp; 2 &amp; 1
		   &amp; 2 &amp; 1 \\
		 3 &amp; 4 &amp; 3 &amp; 1 &amp; 4 &amp; 2 &amp; 3 &amp; 0 &amp; 4 &amp; 2
		   &amp; 3 &amp; 4 \\
		 3 &amp; 1 &amp; 4 &amp; 3 &amp; 1 &amp; 2 &amp; 2 &amp; 4 &amp; 0 &amp; 3
		   &amp; 1 &amp; 2 \\
		 1 &amp; 2 &amp; 1 &amp; 1 &amp; 4 &amp; 2 &amp; 1 &amp; 2 &amp; 3 &amp; 0
		   &amp; 3 &amp; 2 \\
		 2 &amp; 2 &amp; 4 &amp; 2 &amp; 1 &amp; 1 &amp; 2 &amp; 3 &amp; 1 &amp; 3
		   &amp; 0 &amp; 3 \\
		 2 &amp; 1 &amp; 3 &amp; 3 &amp; 3 &amp; 2 &amp; 1 &amp; 4 &amp; 2 &amp; 2
		   &amp; 3 &amp; 0 \\
		\end{array}
		\right)
		</me>
If we scan the matrix, we can see that the maximum distance is the distance between vertices 3 and 5, which is 5 and is the diameter of the graph.   If we focus on individual rows and identify the maximum values, which are the eccentricities, their minimum is 3, which the graph's radius.  This eccentricity value is attained by vertices in the set <m>\{1, 4, 6, 7\}</m>, which is the center of the graph.</p>
</example>
</subsection>

<subsection xml:id="ss-sage-note-search"><title>SageMath Note - Graph Searching</title><idx><h>SageMath Note</h><h>Search in a Graph</h></idx>

<p>The following sequence of Sage cells illustrates how searching can be done in graphs.</p>

<p>Generate a random undirected graph with 18 vertices. For each pair of vertices, an edge is included between them with probability 0.2. Since there are <m>\binom{18}{2}=153</m> potential edges, we expect that there will be approximately <m>0.2 \cdot 153 \approx 31</m> edges.  The random number generation is seeded first so that the result will always be the same in spite of the random graph function.  Changing or removing that first line will let you experiment with different graphs.</p>

<sage>
<input>
set_random_seed(2002)
Gr=graphs.RandomGNP(18,0.2)
Gr.show()
</input>
</sage>

<p>Count the number of edges. In this case the number is a bit less than expected.</p>
<sage>
<input>
len(Gr.edges(labels=False))
</input>
<output>
27
</output>
</sage>



<p>Find a shortest path from vertex 0 to vertex 8.</p>

<sage>
<input>
Gr.shortest_path(0, 8)
</input>
<output>
[0, 7, 3, 8]
</output>
</sage>


<p>Generate a list of vertices that would be reached in a breadth-first search.  The expression <c>Gr.breadth_first_search(0)</c> creates an iterator that is convenient for programming. Wrapping <c>list( )</c> around the expression shows the order in which the vertices are visited with the depth set indicated in the second coordinates.</p>

<sage>
<input>
list(Gr.breadth_first_search(0,report_distance='True'))
</input>
<output>
[(0, 0),(7, 1),(14, 1),(15, 1),(16, 2),(2, 2),(3, 2),(13, 2),(17, 2),
 (4, 2),(5, 2),(10, 2),(6, 2),(11, 2),(8, 3),(1, 3),(9, 3),(12, 3)]
</output>
</sage>


</subsection>

<exercises xml:id="exercises-9-3">
<title>Exercises</title>
<exercise number="1"><statement><p> Apply <xref ref="alg-breadth-first" text="type-global"/> to find a path from 5 to 1 in <xref ref="fig-example-9-3-1" text="type-global"/>. What would be the final value of <m>V</m>? Assume that the terminal vertices
in edge lists and elements of the depth sets are put into ascending order, as we assumed in <xref ref="ex-search-example" text="type-global"/>.</p>
</statement>
<answer><p>  
<me>\begin{array}{ccccccc}
 k &amp; 1 &amp; 2 &amp; 3 &amp; 4 &amp; 5 &amp; 6 \\
 V[k].\text{found} &amp; T &amp; T &amp; T &amp; F &amp; F &amp; T \\
 V[k].\text{from} &amp; 2 &amp; 5 &amp; 6 &amp; * &amp; * &amp; 5 \\
 \text{Depth} \text{Set} &amp; 2 &amp; 1 &amp; 2 &amp; * &amp; * &amp; 1 \\
\end{array}</me> </p>
<p><m>\text{(*} = \text{undefined})</m></p>
</answer></exercise>
<exercise number="2"><statement><p> Apply <xref ref="alg-breadth-first" text="type-global"/> to find a path from <m>d</m> to <m>c</m>  in the road graph in <xref ref="ex-undirected-1" text="type-global"/> using the edge list in that example. Assume that the elements
of the depth sets are put into ascending order.</p></statement>
<answer component="im">
<p>
<me>
	\begin{array}{llllll}
			k         		&amp; 1 &amp; 2 &amp; 3 &amp; 4 &amp; 5 \\
			v_k.\text{name}  &amp; a &amp; b &amp; c &amp; d &amp; e \\
			v_k.\text{found} &amp; T &amp; T &amp; T &amp; T &amp; T \\
			v_k.\text{from}  &amp; d &amp; d &amp; b &amp; - &amp; b \\
			\text{Depth Set} &amp; 1 &amp; 1 &amp; 2 &amp; 0 &amp; 2
	\end{array}
</me>
</p>
</answer>
</exercise>
<exercise number="3"><statement><p> In a simple undirected graph with no self-loops, what is the maximum number of edges you can have, keeping the graph unconnected? What is the
minimum number of edges that will assure that the graph is connected?</p></statement>
<answer><p>If the number of vertices is <m>n</m>, there can be <m>\frac{(n-1)(n-2)}{2}</m> vertices with one vertex not connected to any of the others. One more edge and connectivity is assured.</p></answer></exercise>
<exercise number="4"><statement> <p>Use a broadcasting algorithm to determine the shortest path from vertex <m>a</m> to vertex <m>i</m> in the graphs shown in the <xref ref="fig-exercise-9-3-4" text="type-global"/> below. List the depth sets
and the stack that is created.</p>

<figure xml:id="fig-exercise-9-3-4">
	  <caption>Shortest paths from <m>a</m> to <m>i</m>?</caption>
	  <image width="60%" source="images/fig-exercise-9-3-4.png">
		  <description><p>Graphs for exercise 9-3-4</p></description>
	 </image>
</figure>
</statement>
<answer component="im">
<p><ol marker="(a)"><li><p><m>D_0=\{a\}</m>, <m>D_1=\{b\}</m>, <m>D_2=\{c, f\}</m>, <m>D_3=\{d, g\}</m>, <m>D_4=\{e, h, i\}</m> and <m>D_5=\emptyset</m>.  We can construct a path from <m>a</m> to <m>i</m> using the data <m>i.from=g</m>, <m>g.from=c</m>, <m>c.from=b</m> and <m>b.from=a</m> to get the path <m>a, b, c, g, i</m>.
</p></li>
<li><p><m>D_0=\{a\}</m>, <m>D_1=\{b\}</m>, <m>D_2=\{d\}</m>, <m>D_3=\{e,h\}</m>, <m>D_4=\{c,i\}</m> and <m>D_5=\emptyset</m>.  We can construct a path from <m>a</m> to <m>i</m> using the data <m>i.from=e</m>, <m>e.from=d</m>, <m>d.from=b</m> and <m>b.from=a</m> to get the path <m>a, b, d, e, i</m>.</p></li>
</ol></p>
</answer>
</exercise>
<exercise number="5"><statement> <p>For each of the following graphs, determine the eccentricities of each vertex, and the diameter, radius, and center of the graph.</p>
<sidebyside>
	  <image width="60%" source="images/fig-measure-graph-1.png">
		  <description><p>An undirected graph with 6 vertices.</p></description>
	 </image>
	  <image width="60%" source="images/fig-measure-graph-2.png">
		  <description><p>An undirected graph with 6 vertices.</p></description>
	 </image>
</sidebyside>
<sidebyside>
	  <image width="60%" source="images/fig-measure-graph-3.png">
		  <description><p>An undirected graph with 6 vertices.</p></description>
	 </image>
	  <image width="60%" source="images/fig-measure-graph-4.png">
		  <description><p>An undirected graph with 6 vertices.</p></description>
	 </image>
</sidebyside>
</statement>
<answer><p>
	<ol marker="(a)">
		<li><p>The eccentricity of each vertex is 2; and the diameter and radius are both 2 as well. All vertices are part of the center.</p></li>
		<li><p>The corners (1,3,10 and 10) have eccentricities 5.  The two central vertices, 5 and 8, which are in the center of the graph have eccentricity 3.  All other vertices have eccentricity 4.  The diameter is 5.  The radius is 3. </p></li>
		<li><p>Vertices 1, 2 and 5 have eccentricity 2 and make up the center of this graph.   Verticies 7 and 8 have eccentricity 4, and all other vertices have eccentricity 3.  The diameter is 4.  The radius is 2.  </p></li>
		<li><p>The eccentricity of each vertex is 4; and the diameter and radius are both 4 as well. All vertices are part of the center.</p></li>
	</ol>
	</p>
</answer>
</exercise>
<exercise number="6"><statement><p>
	<ol marker="(a)">
		<li><p>The terms diameter, radius and center are familiar ones in the context of circles.  Compare their usage in circles and graphs.  How are they similar and how are they different?</p></li>
		<li><p><q>Eccentricity</q> might be less familiar.  How is is used in geometry, and does it have a compatible use in graph theory?</p></li>
	</ol>	
</p></statement>
<answer component="im">
<p><ol marker="(a)">
		<li><p>Whereas <m>d=2r</m> for any circle, the relationship between radius and diameter in a graph is as exact.  The best we can say is that <m>r \leq d \leq 2r</m> in a graph.</p></li>
		<li><p>The term eccentricity as it applies to ellipses is a measurement of the whole ellipse, while in a graph the eccentricity is defined for individual vertices. </p></li>
	</ol>
</p>
</answer>
</exercise>
<exercise number="7"><statement><p> Prove (by induction on <m>k</m>) that if the relation <m>r</m> on vertices of a graph is defined by <m>v r w</m> if there is an edge connecting
<m>v</m> to <m>w</m>, then <m>r^k</m>, <m>k \geq  1</m>, is defined by <m>v r^kw</m> if there is a path of length <m>k</m> from <m>v</m> to
<m>w</m>.</p>
</statement><answer><p> Basis: <m>(k=1)</m> Is the relation <m>r^1</m>, defined by <m>v r^1 w</m> if there is a path of length 1 from <m>v \text{ to } w</m>? Yes, since
<m>v r w</m> if and only if an edge, which is a path of length <m>1</m>, connects <m>v</m> to <m>w</m>.</p>
<p>Induction: Assume that <m>v r^k w</m> if and only if there is a path of length <m>k</m> from <m>v</m> to <m>w</m>. We must show
that <m>v r^{k+1} w</m> if and only if there is a path of length <m>k+1</m> from <m>v</m> to <m>w</m>.
<me>v r^{k+1} w \Rightarrow v r^k y \textrm{ and } y r w\textrm{ for some vertex } y</me></p>
<p>By the induction
hypothesis, there is a path of length <m>k</m> from <m>v \textrm{ to } y</m>. And by the basis, there is a path of length one from <m>y</m> to <m>w</m>. If we combine these two paths, we obtain a path of length <m>k+1</m> from <m>v</m> to <m>w</m>. Of course, if we start with a path of length
<m>k+1</m> from <m>v</m> to <m>w</m>, we have a path of length <m>k</m> from <m>v</m> to some vertex <m>y</m> and a path of length 1 from <m>y</m> to <m>w</m>. Therefore, <m>v r^k y \textrm{ and } y r w \Rightarrow  v r^{k+1} w</m>.
</p></answer></exercise>
<exercise number="8"><statement><p>For each of the following distance matrices of graphs, identify the diameter, radius and center.  Assume the graphs vertices are the numbers 1 through <m>n</m> for an <m>n \times n</m> matrix.
	<ol marker="(a)">
		<li><p><m>\left(
\begin{array}{cccccccccc}
 0 &amp; 2 &amp; 1 &amp; 2 &amp; 2 &amp; 3 &amp; 3 &amp; 2 &amp; 1 &amp; 1 \\
 2 &amp; 0 &amp; 1 &amp; 2 &amp; 3 &amp; 3 &amp; 3 &amp; 2 &amp; 3 &amp; 2 \\
 1 &amp; 1 &amp; 0 &amp; 1 &amp; 2 &amp; 2 &amp; 2 &amp; 1 &amp; 2 &amp; 1 \\
 2 &amp; 2 &amp; 1 &amp; 0 &amp; 3 &amp; 3 &amp; 3 &amp; 2 &amp; 3 &amp; 2 \\
 2 &amp; 3 &amp; 2 &amp; 3 &amp; 0 &amp; 2 &amp; 1 &amp; 1 &amp; 2 &amp; 1 \\
 3 &amp; 3 &amp; 2 &amp; 3 &amp; 2 &amp; 0 &amp; 1 &amp; 1 &amp; 3 &amp; 2 \\
 3 &amp; 3 &amp; 2 &amp; 3 &amp; 1 &amp; 1 &amp; 0 &amp; 1 &amp; 3 &amp; 2 \\
 2 &amp; 2 &amp; 1 &amp; 2 &amp; 1 &amp; 1 &amp; 1 &amp; 0 &amp; 2 &amp; 1 \\
 1 &amp; 3 &amp; 2 &amp; 3 &amp; 2 &amp; 3 &amp; 3 &amp; 2 &amp; 0 &amp; 1 \\
 1 &amp; 2 &amp; 1 &amp; 2 &amp; 1 &amp; 2 &amp; 2 &amp; 1 &amp; 1 &amp; 0 \\
\end{array}
\right)</m></p></li>
		<li><p><m>\left(
\begin{array}{cccccccccccc}
 0 &amp; 2 &amp; 2 &amp; 2 &amp; 3 &amp; 3 &amp; 3 &amp; 1 &amp; 2 &amp; 3 &amp; 1 &amp; 1 \\
 2 &amp; 0 &amp; 2 &amp; 2 &amp; 1 &amp; 1 &amp; 1 &amp; 3 &amp; 2 &amp; 1 &amp; 1 &amp; 3 \\
 2 &amp; 2 &amp; 0 &amp; 1 &amp; 3 &amp; 2 &amp; 1 &amp; 2 &amp; 2 &amp; 3 &amp; 1 &amp; 1 \\
 2 &amp; 2 &amp; 1 &amp; 0 &amp; 3 &amp; 1 &amp; 2 &amp; 1 &amp; 2 &amp; 3 &amp; 2 &amp; 1 \\
 3 &amp; 1 &amp; 3 &amp; 3 &amp; 0 &amp; 2 &amp; 2 &amp; 4 &amp; 3 &amp; 2 &amp; 2 &amp; 4 \\
 3 &amp; 1 &amp; 2 &amp; 1 &amp; 2 &amp; 0 &amp; 2 &amp; 2 &amp; 3 &amp; 2 &amp; 2 &amp; 2 \\
 3 &amp; 1 &amp; 1 &amp; 2 &amp; 2 &amp; 2 &amp; 0 &amp; 3 &amp; 3 &amp; 2 &amp; 2 &amp; 2 \\
 1 &amp; 3 &amp; 2 &amp; 1 &amp; 4 &amp; 2 &amp; 3 &amp; 0 &amp; 3 &amp; 4 &amp; 2 &amp; 2 \\
 2 &amp; 2 &amp; 2 &amp; 2 &amp; 3 &amp; 3 &amp; 3 &amp; 3 &amp; 0 &amp; 1 &amp; 3 &amp; 1 \\
 3 &amp; 1 &amp; 3 &amp; 3 &amp; 2 &amp; 2 &amp; 2 &amp; 4 &amp; 1 &amp; 0 &amp; 2 &amp; 2 \\
 1 &amp; 1 &amp; 1 &amp; 2 &amp; 2 &amp; 2 &amp; 2 &amp; 2 &amp; 3 &amp; 2 &amp; 0 &amp; 2 \\
 1 &amp; 3 &amp; 1 &amp; 1 &amp; 4 &amp; 2 &amp; 2 &amp; 2 &amp; 1 &amp; 2 &amp; 2 &amp; 0 \\
\end{array}
\right)</m></p></li>
	</ol>	
</p></statement>
<answer component="im">
<p><ol marker="(a)">
		<li><p><m>d=3</m>, <m>r=3</m> and the center is <m>\{3,8,10\}</m>.</p></li>
		<li><p><m>d=4</m>, <m>r=3</m> and the center is <m>\{1,2,3,4,6,7,9,11\}</m>.</p></li>
	</ol>
</p>
</answer>
</exercise>
</exercises>
</section>